2024-07-26 22:04:57,520 [68611] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-26 22:04:57,521 [68611] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-26 22:04:57,521 [68611] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-26 22:04:57,523 [68611] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-26 22:04:57,523 [68611] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-26 22:04:57,523 [68611] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-26 22:04:58,299 [68611] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-26 22:04:58,299 [68611] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-26 22:04:58,300 [68611] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-26 22:04:58,302 [68611] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-26 22:04:58,302 [68611] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-26 22:04:58,302 [68611] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-26 22:05:17,075 [68620] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-26 22:05:17,076 [68620] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-26 22:05:17,076 [68620] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-26 22:05:17,079 [68620] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-26 22:05:17,079 [68620] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-26 22:05:17,080 [68620] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-26 22:05:17,859 [68620] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-26 22:05:17,859 [68620] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-26 22:05:17,859 [68620] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-26 22:05:17,862 [68620] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-26 22:05:17,862 [68620] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-26 22:05:17,863 [68620] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-26 22:07:16,972 [68611] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-26 22:07:16,973 [68611] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-26 22:07:16,973 [68611] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-26 22:07:16,976 [68611] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-26 22:07:16,977 [68611] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-26 22:07:16,977 [68611] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-27 00:17:01,277 [88277] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-27 00:17:01,278 [88277] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-27 00:17:01,278 [88277] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-27 00:17:01,280 [88277] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-27 00:17:01,281 [88277] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-27 00:17:01,281 [88277] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-27 00:17:01,964 [88277] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-27 00:17:01,965 [88277] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-27 00:17:01,965 [88277] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-27 00:17:01,968 [88277] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-27 00:17:01,969 [88277] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-27 00:17:01,970 [88277] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 13:44:36,151 [33772] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 13:44:36,154 [33772] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 13:44:36,154 [33772] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 13:44:36,156 [33772] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 13:44:36,156 [33772] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 13:44:36,157 [33772] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 13:44:36,942 [33772] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 13:44:36,942 [33772] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 13:44:36,942 [33772] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 13:44:36,945 [33772] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 13:44:36,945 [33772] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 13:44:36,946 [33772] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 13:44:49,074 [33772] DEBUG    tensorflow:34: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-07-30 13:44:49,703 [33772] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2024-07-30 13:44:49,703 [33772] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2024-07-30 13:44:49,703 [33772] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2024-07-30 13:44:49,703 [33772] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2024-07-30 13:44:51,414 [33772] INFO     numexpr.utils:148: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2024-07-30 13:44:51,414 [33772] INFO     numexpr.utils:160: [JupyterRequire] NumExpr defaulting to 8 threads.
2024-07-30 13:48:41,405 [33843] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 13:48:41,405 [33843] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 13:48:41,405 [33843] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 13:48:41,407 [33843] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 13:48:41,407 [33843] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 13:48:41,408 [33843] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 13:48:41,919 [33843] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 13:48:41,920 [33843] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 13:48:41,920 [33843] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 13:48:41,921 [33843] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 13:48:41,922 [33843] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 13:48:41,922 [33843] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 13:48:48,769 [33843] INFO     numexpr.utils:148: [JupyterRequire] Note: NumExpr detected 12 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 8.
2024-07-30 13:48:48,769 [33843] INFO     numexpr.utils:160: [JupyterRequire] NumExpr defaulting to 8 threads.
2024-07-30 13:48:49,247 [33843] DEBUG    matplotlib:275: [JupyterRequire] matplotlib data path: /Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data
2024-07-30 13:48:49,252 [33843] DEBUG    matplotlib:275: [JupyterRequire] CONFIGDIR=/Users/innakonar/.matplotlib
2024-07-30 13:48:49,253 [33843] DEBUG    matplotlib:1445: [JupyterRequire] interactive is False
2024-07-30 13:48:49,253 [33843] DEBUG    matplotlib:1446: [JupyterRequire] platform is darwin
2024-07-30 13:48:49,254 [33843] DEBUG    matplotlib:1447: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'google', 'PyObjCTools', 'repoze', 'ruamel', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'copy', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'concurrent', 'traceback', '_string', 'string', 'atexit', 'logging', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'array', 'socket', '_ssl', '_struct', 'struct', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', '_queue', 'queue', 'platform', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', '_cython_0_29_30', 'cython_runtime', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.message', '_bisect', 'bisect', '_random', '_sha512', 'random', '_compat_pickle', '_pickle', 'pickle', 'zmq.constants', 'zmq.backend.cython.socket', 'zmq.backend.cython._device', 'zmq.backend.cython._poll', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython._version', 'zmq.backend.cython.error', 'zmq.backend.cython.utils', 'zmq.backend.cython', 'zmq.backend', 'zmq.sugar.attrsettr', 'zmq._typing', 'zmq.utils', 'zmq.utils.jsonapi', 'zmq.sugar.poll', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'zmq._future', 'zmq.asyncio', 'jupyter_client.channelsabc', '_hashlib', '_blake2', 'hashlib', 'hmac', 'pprint', '_datetime', 'datetime', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'traitlets.log', 'tornado', 'numbers', 'logging.handlers', 'html.entities', 'html', 'urllib', 'urllib.parse', 'zlib', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'dateutil._version', 'dateutil', '__future__', 'locale', 'calendar', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.session', 'jupyter_client.channels', 'termios', 'getpass', 'jupyter_client.clientabc', 'fnmatch', 'glob', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'tempfile', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'pathlib', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.connect', 'jupyter_client.client', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'jupyter_client.launcher', '_uuid', 'uuid', 'jupyter_client.managerabc', 'zipfile', 'configparser', 'entrypoints', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.factory', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.provisioning', 'jupyter_client.kernelspec', 'jupyter_client.manager', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__darwin_darwin', '_osx_support', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', '_csv', 'csv', 'email', 'importlib.metadata', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles._mapping', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi._compatibility', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.inference.docstring_utils', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'concurrent.futures.thread', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', '_scproxy', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipykernel.control', 'ipykernel.heartbeat', 'ipykernel.iostream', 'IPython.utils.tokenutil', 'ipykernel.jsonutil', 'psutil._common', 'psutil._compat', 'psutil._psposix', 'psutil._psutil_osx', 'psutil._psutil_posix', 'psutil._psosx', 'psutil', 'tornado.locks', 'tornado.queues', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.backports', 'pkg_resources.extern.backports', 'pkg_resources._vendor.backports.tarfile', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources._vendor.packaging._elffile', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources._vendor.packaging.tags', 'pkg_resources._vendor.packaging._structures', 'pkg_resources._vendor.packaging.version', 'pkg_resources._vendor.packaging.utils', 'pkg_resources._vendor.packaging.specifiers', 'pkg_resources._vendor.packaging._tokenizer', 'pkg_resources._vendor.packaging._parser', 'pkg_resources._vendor.packaging.markers', 'pkg_resources._vendor.packaging.requirements', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.macos', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'packaging.__about__', 'packaging', 'packaging._structures', 'packaging.version', 'ipykernel.eventloops', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'setuptools._distutils', 'distutils._functools', 'distutils.compat.py38', 'distutils.compat', 'distutils.compat.py39', 'distutils.errors', 'distutils._modified', 'distutils._log', 'distutils.dir_util', 'distutils.debug', 'distutils.spawn', 'distutils.archive_util', 'distutils.file_util', 'distutils.util', 'distutils.cmd', 'distutils.config', 'distutils._vendor', 'distutils._vendor.packaging', 'distutils._vendor.packaging._elffile', 'distutils._vendor.packaging._manylinux', 'distutils._vendor.packaging._musllinux', 'distutils._vendor.packaging.tags', 'distutils._vendor.packaging._structures', 'distutils._vendor.packaging.version', 'distutils._vendor.packaging.utils', 'distutils.fancy_getopt', 'distutils.dist', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'distutils.log', 'distutils.filelist', 'setuptools.monkey', 'setuptools.logging', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._py39compat', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'setuptools.version', 'setuptools._imp', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.depends', 'setuptools._path', 'setuptools.discovery', 'distutils.command', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.packaging._elffile', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging._tokenizer', 'setuptools.extern.packaging._parser', 'setuptools.extern.packaging.markers', 'setuptools.errors', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools._vendor.backports', 'setuptools.extern.backports', 'setuptools._vendor.backports.tarfile', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools._normalization', 'setuptools.extern.packaging.requirements', 'setuptools._reqs', 'distutils.command.bdist', 'setuptools.command', 'setuptools.warnings', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.dist', 'setuptools.extension', 'setuptools._core_metadata', 'setuptools.msvc', 'setuptools', 'distutils', 'distutils.version', 'ctypes.macholib', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ctypes.macholib.dyld', 'ctypes.util', 'appnope._nope', 'appnope', 'storemagic', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'numpy._globals', 'numpy.__config__', 'numpy._distributor_init', 'numpy._version', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core._machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_35', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'pytz.exceptions', 'pytz.lazy', 'pytz.tzinfo', 'pytz.tzfile', 'pytz', 'pandas._typing', 'pandas.compat._constants', 'pandas.compat.compressors', '_cython_0_29_33', 'pandas._libs.tslibs.np_datetime', 'pandas._libs.tslibs.dtypes', 'pandas._libs.tslibs.base', 'pandas._libs.tslibs.nattype', 'pandas.util._exceptions', 'pandas.util.version', 'pandas.compat._optional', 'zoneinfo._tzpath', 'zoneinfo._common', '_zoneinfo', 'zoneinfo', 'pandas._libs.tslibs.timezones', 'pandas._libs.tslibs.ccalendar', 'pandas._config.config', 'pandas._config.dates', 'pandas._config.display', 'pandas._config', 'pandas._config.localization', 'pandas._libs.tslibs.fields', 'pandas._libs.tslibs.timedeltas', 'pandas._libs.tslibs.tzconversion', 'pandas._libs.tslibs.timestamps', 'dateutil.easter', 'pandas._libs.properties', 'pandas._libs.tslibs.offsets', 'pandas._libs.tslibs.strptime', 'pandas._libs.tslibs.parsing', 'pandas._libs.tslibs.conversion', 'pandas._libs.tslibs.period', 'pandas._libs.tslibs.vectorized', 'pandas._libs.tslibs', 'pandas._libs.ops_dispatch', 'pandas._libs.missing', 'pandas._libs.hashtable', 'pandas._libs.algos', 'pandas._libs.interval', 'pandas._libs', 'pandas.util._decorators', 'pandas.core', 'pandas.core.util', 'pandas._libs.lib', 'pandas._libs.hashing', 'pandas.core.dtypes', 'pandas.errors', 'pandas.core.dtypes.generic', 'pandas.core.dtypes.base', 'pandas.core.dtypes.inference', 'pandas.core.dtypes.dtypes', 'pandas.core.dtypes.common', 'pandas.core.util.hashing', 'pandas.util', 'pandas.compat.numpy', 'pyarrow._generated_version', '_cython_0_29_36', 'cloudpickle.compat', 'typing_extensions', 'cloudpickle.cloudpickle', 'cloudpickle.cloudpickle_fast', 'cloudpickle', 'pyarrow.util', 'pyarrow.lib', 'pyarrow._hdfsio', 'pyarrow.filesystem', 'pyarrow.hdfs', 'pyarrow.ipc', 'pyarrow.types', 'pyarrow', 'pandas.compat.pyarrow', 'pandas.compat', 'pandas._libs.tslib', 'pandas.core.config_init', 'pandas.core.dtypes.missing', 'pandas.core.dtypes.cast', 'pandas.core.dtypes.astype', 'pandas.core.dtypes.concat', 'pandas.core.array_algos', 'pandas.core.common', 'pandas.core.construction', 'pandas.core.array_algos.take', 'pandas.core.indexers.utils', 'pandas.core.indexers', 'pandas.core.algorithms', 'pandas.util._validators', 'pandas.core.roperator', 'pandas._libs.ops', 'pandas.core.computation', 'numexpr.interpreter', 'numexpr.expressions', 'numexpr.version', 'numexpr.utils', 'numexpr.necompiler', 'numexpr', 'pandas.core.computation.check', 'pandas.core.computation.expressions', 'pandas.core.ops.missing', 'pandas.core.ops.dispatch', 'pandas.core.ops.invalid', 'pandas.core.ops.array_ops', 'pandas.core.ops.common', 'pandas.core.ops.docstrings', 'pandas.core.ops.mask_ops', 'pandas.core.ops.methods', 'pandas.core.ops', 'pandas.core.arraylike', 'pandas.compat.numpy.function', 'pandas.core.missing', 'pandas.core.array_algos.quantile', 'pandas.core.sorting', 'pandas.core.arrays.base', 'pandas.core.strings', 'pandas.core.strings.base', 'pandas.tseries', 'pandas.tseries.frequencies', 'pyarrow._compute', 'pyarrow._compute_docstrings', 'pyarrow.vendored', 'pyarrow.vendored.docscrape', 'pyarrow.compute', 'pandas.core.arrays.arrow._arrow_utils', 'pandas.core.arrays.arrow.dtype', 'pandas.core.arrays.arrow.array', 'pandas.core.arrays.arrow', 'pandas.core.array_algos.masked_accumulations', 'bottleneck.benchmark', 'bottleneck.benchmark.autotimeit', 'bottleneck.benchmark.bench', 'bottleneck.benchmark.bench_detailed', 'bottleneck.tests', 'bottleneck.tests.util', 'bottleneck.slow.reduce', 'bottleneck.slow.nonreduce', 'bottleneck.slow.nonreduce_axis', 'bottleneck.slow.move', 'bottleneck.slow', 'bottleneck._pytesttester', 'bottleneck.move', 'bottleneck.nonreduce', 'bottleneck.nonreduce_axis', 'bottleneck.reduce', 'bottleneck._version', 'bottleneck', 'pandas.core.nanops', 'pandas.core.array_algos.masked_reductions', 'pandas.core.arrays.masked', 'pandas.core.arrays.boolean', 'pandas._libs.arrays', 'pandas.core.accessor', 'pandas.core.array_algos.transforms', 'pandas.core.arrays._mixins', 'pandas.core.base', 'pandas.core.strings.object_array', 'pandas.io', 'pandas.io.formats', 'pandas.io.formats.console', 'pandas.core.arrays.categorical', 'pandas.core.array_algos.datetimelike_accumulations', 'pandas.core.arrays.numeric', 'pandas.core.arrays.integer', 'pandas.core.arrays.datetimelike', 'pandas.core.arrays._ranges', 'pandas.tseries.offsets', 'pandas.core.arrays.datetimes', 'pandas.core.arrays.floating', 'pandas.core.arrays.timedeltas', 'pandas.core.arrays.interval', 'pandas.core.arrays.numpy_', 'pandas.core.arrays.period', 'pandas._libs.sparse', 'pandas.core.arrays.sparse.dtype', 'pandas.io.formats.printing', 'pandas.core.arrays.sparse.array', 'pandas.core.arrays.sparse.accessor', 'pandas.core.arrays.sparse', 'pandas.core.arrays.string_', 'pandas.core.arrays.string_arrow', 'pandas.core.arrays', 'pandas.core.flags', 'pandas._libs.reduction', 'pandas.core.apply', 'pandas._libs.indexing', 'pandas.core.indexes', 'pandas._libs.index', 'pandas._libs.internals', 'pandas._libs.join', 'pandas.core.array_algos.putmask', 'pandas.core.indexes.frozen', 'pandas.core.strings.accessor', 'pandas.core.indexes.base', 'pandas.core.indexes.extension', 'pandas.core.indexes.category', 'pandas.core.indexes.range', 'pandas.core.tools', 'pandas.core.tools.timedeltas', 'pandas.core.indexes.datetimelike', 'pandas.core.tools.times', 'pandas.core.indexes.datetimes', 'pandas.core.indexes.multi', 'pandas.core.indexes.timedeltas', 'pandas.core.indexes.interval', 'pandas.core.indexes.period', 'pandas.core.indexes.api', 'pandas.core.indexing', 'pandas.core.sample', 'pandas.core.array_algos.replace', 'pandas._libs.writers', 'pandas.core.internals.blocks', 'pandas.core.internals.api', 'pandas.core.internals.base', 'pandas.core.internals.array_manager', 'pandas.core.internals.ops', 'pandas.core.internals.managers', 'pandas.core.internals.concat', 'pandas.core.internals', 'pandas.core.internals.construction', 'pandas.core.methods', 'pandas.core.reshape', 'pandas.core.reshape.concat', 'mmap', 'tarfile', 'pandas.core.shared_docs', 'pandas.io.common', 'pandas.io.formats.format', 'pandas.core.methods.describe', 'pandas._libs.window', 'pandas._libs.window.aggregations', 'pandas._libs.window.indexers', 'pandas.core.indexers.objects', 'pandas.core.util.numba_', 'pandas.core.window.common', 'pandas.core.window.doc', 'pandas.core.window.numba_', 'pandas.core.window.online', 'pandas.core._numba', 'pandas.core._numba.executor', 'pandas.core.window.rolling', 'pandas.core.window.ewm', 'pandas.core.window.expanding', 'pandas.core.window', 'pandas.core.generic', 'pandas.core.methods.selectn', 'pandas.core.reshape.util', 'pandas.core.tools.numeric', 'pandas.core.reshape.melt', 'pandas._libs.reshape', 'pandas.core.indexes.accessors', 'pandas.arrays', 'pandas.core.tools.datetimes', 'pandas.io.formats.info', 'pandas.plotting._core', 'pandas.plotting._misc', 'pandas.plotting', 'pandas.core.series', 'pandas.core.frame', 'pandas.core.groupby.base', 'pandas._libs.groupby', 'pandas.core.groupby.numba_', 'pandas.core.groupby.categorical', 'pandas.core.groupby.grouper', 'pandas.core.groupby.ops', 'pandas.core.groupby.indexing', 'pandas.core.groupby.groupby', 'pandas.core.groupby.generic', 'pandas.core.groupby', 'pandas.core.api', 'pandas.tseries.api', 'pandas.core.computation.common', 'pandas.core.computation.align', 'pandas.core.computation.scope', 'pandas.core.computation.ops', 'pandas.core.computation.engines', 'pandas.core.computation.parsing', 'pandas.core.computation.expr', 'pandas.core.computation.eval', 'pandas.core.computation.api', 'pandas.core.reshape.encoding', 'pandas.core.reshape.merge', 'pandas.core.reshape.pivot', 'pandas.core.reshape.tile', 'pandas.core.reshape.api', 'pandas.api.extensions', 'pandas.api.indexers', 'pandas.core.interchange', 'pandas.core.interchange.dataframe_protocol', 'pandas.core.dtypes.api', 'pandas.api.types', 'pandas.core.interchange.buffer', 'pandas.core.interchange.utils', 'pandas.core.interchange.column', 'pandas.core.interchange.from_dataframe', 'pandas.api.interchange', 'pandas.api', 'pandas._testing._random', 'pandas._testing.contexts', 'pandas._testing._io', 'pandas._testing._warnings', 'cmath', 'pandas._libs.testing', 'pandas._testing.asserters', 'pandas._testing.compat', 'pandas._testing', 'pandas.testing', 'pandas.util._print_versions', 'pandas.io.clipboards', 'pandas._libs.parsers', 'pandas.io.excel._util', 'pandas.io._util', 'pandas.io.parsers.base_parser', 'pandas.io.parsers.arrow_parser_wrapper', 'pandas.io.parsers.c_parser_wrapper', 'pandas.io.parsers.python_parser', 'pandas.io.parsers.readers', 'pandas.io.parsers', 'pandas.io.excel._odfreader', 'pandas.io.excel._openpyxl', 'pandas.io.excel._pyxlsb', 'pandas.io.excel._xlrd', 'pandas.io.excel._base', 'pandas._libs.json', 'pandas.io.excel._odswriter', 'pandas.io.excel._xlsxwriter', 'pandas.io.excel', 'pandas.io.feather_format', 'pandas.io.gbq', 'pandas.io.html', 'pandas.io.json._normalize', 'pandas.io.json._table_schema', 'pandas.io.json._json', 'pandas.io.json', 'pandas.io.orc', 'pandas.io.parquet', 'pandas.compat.pickle_compat', 'pandas.io.pickle', 'pandas.core.computation.pytables', 'pandas.io.pytables', 'pandas.io.sas.sasreader', 'pandas.io.sas', 'pandas.io.spss', 'pandas.io.sql', 'pandas.io.stata', 'pandas.io.xml', 'pandas.io.api', 'pandas.util._tester', 'pandas._version', 'pandas', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._version', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._deprecate', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib.ft2font', 'kiwisolver._cext', 'kiwisolver']
2024-07-30 13:48:49,382 [33843] DEBUG    matplotlib:275: [JupyterRequire] CACHEDIR=/Users/innakonar/.matplotlib
2024-07-30 13:48:49,385 [33843] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /Users/innakonar/.matplotlib/fontlist-v330.json
2024-07-30 13:48:59,575 [33843] DEBUG    tensorflow:34: [JupyterRequire] Falling back to TensorFlow client; we recommended you install the Cloud TPU client directly with pip install cloud-tpu-client.
2024-07-30 13:49:00,087 [33843] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2024-07-30 13:49:00,087 [33843] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2024-07-30 13:49:00,087 [33843] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 7 to 5
2024-07-30 13:49:00,087 [33843] DEBUG    h5py._conv:47: [JupyterRequire] Creating converter from 5 to 7
2024-07-30 13:52:14,877 [33843] DEBUG    h5py._conv:78: [JupyterRequire] Creating converter from 3 to 5
2024-07-30 14:24:37,885 [33843] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 14:24:37,891 [33843] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 14:24:37,891 [33843] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 14:24:37,904 [33843] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 14:24:37,906 [33843] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 14:24:37,907 [33843] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 16:28:51,772 [37050] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 16:28:51,775 [37050] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 16:28:51,775 [37050] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 16:28:51,777 [37050] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 16:28:51,777 [37050] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 16:28:51,777 [37050] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 16:28:52,599 [37050] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 16:28:52,599 [37050] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 16:28:52,599 [37050] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 16:28:52,601 [37050] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 16:28:52,601 [37050] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 16:28:52,602 [37050] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 16:30:42,192 [37101] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 16:30:42,193 [37101] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 16:30:42,193 [37101] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 16:30:42,196 [37101] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 16:30:42,197 [37101] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 16:30:42,197 [37101] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 16:30:42,979 [37101] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 16:30:42,979 [37101] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 16:30:42,979 [37101] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 16:30:42,982 [37101] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 16:30:42,982 [37101] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 16:30:42,982 [37101] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 21:34:46,649 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 21:34:46,653 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 21:34:46,653 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 21:34:46,655 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 21:34:46,656 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 21:34:46,656 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 21:34:47,338 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 21:34:47,339 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 21:34:47,339 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 21:34:47,341 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 21:34:47,342 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 21:34:47,342 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 21:48:44,642 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 21:48:44,646 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 21:48:44,647 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 21:48:44,650 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 21:48:44,651 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 21:48:44,651 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-30 22:49:14,362 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-30 22:49:14,367 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-30 22:49:14,368 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-30 22:49:14,373 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-30 22:49:14,374 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-30 22:49:14,375 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 06:37:10,368 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 06:37:10,374 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 06:37:10,375 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 06:37:10,378 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 06:37:10,379 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 06:37:10,380 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 11:27:38,676 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 11:27:38,681 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 11:27:38,681 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 11:27:38,689 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 11:27:38,692 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 11:27:38,693 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 11:42:53,604 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 11:42:53,607 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 11:42:53,607 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 11:42:53,612 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 11:42:53,614 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 11:42:53,615 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 11:56:56,782 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 11:56:56,783 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 11:56:56,783 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 11:56:56,788 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 11:56:56,789 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 11:56:56,790 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 12:48:03,396 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 12:48:03,405 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 12:48:03,405 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 12:48:03,414 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 12:48:03,415 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 12:48:03,416 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 14:57:06,549 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 14:57:06,561 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 14:57:06,561 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 14:57:06,567 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 14:57:06,568 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 14:57:06,569 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 15:05:18,611 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 15:05:18,612 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 15:05:18,613 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 15:05:18,620 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 15:05:18,622 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 15:05:18,623 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 15:10:55,106 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 15:10:55,109 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 15:10:55,109 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 15:10:55,112 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 15:10:55,114 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 15:10:55,114 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 15:52:51,067 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 15:52:51,073 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 15:52:51,074 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 15:52:51,077 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 15:52:51,078 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 15:52:51,078 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 18:47:42,687 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 18:47:42,690 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 18:47:42,690 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 18:47:42,693 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 18:47:42,693 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 18:47:42,693 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 19:05:50,400 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 19:05:50,401 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 19:05:50,401 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 19:05:50,411 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 19:05:50,413 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 19:05:50,413 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 21:28:12,555 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 21:28:12,560 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 21:28:12,561 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 21:28:12,564 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 21:28:12,564 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 21:28:12,564 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 21:49:02,458 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 21:49:02,459 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 21:49:02,459 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 21:49:02,461 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 21:49:02,462 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 21:49:02,462 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 21:53:42,495 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 21:53:42,500 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 21:53:42,502 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 21:53:42,520 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 21:53:42,521 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 21:53:42,524 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 22:05:15,372 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 22:05:15,382 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 22:05:15,382 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 22:05:15,386 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 22:05:15,387 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 22:05:15,388 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 23:16:13,573 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 23:16:13,576 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 23:16:13,576 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 23:16:13,579 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 23:16:13,580 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 23:16:13,581 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-07-31 23:24:36,710 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-07-31 23:24:36,711 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-07-31 23:24:36,711 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-07-31 23:24:36,712 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-07-31 23:24:36,713 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-07-31 23:24:36,713 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 06:11:51,325 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 06:11:51,329 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 06:11:51,329 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 06:11:51,332 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 06:11:51,333 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 06:11:51,334 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 09:45:25,539 [60886] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 09:45:25,544 [60886] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 09:45:25,545 [60886] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 09:45:25,548 [60886] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 09:45:25,548 [60886] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 09:45:25,549 [60886] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 09:45:26,426 [60886] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 09:45:26,427 [60886] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 09:45:26,427 [60886] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 09:45:26,430 [60886] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 09:45:26,430 [60886] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 09:45:26,430 [60886] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 12:58:04,804 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 12:58:04,809 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 12:58:04,810 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 12:58:04,815 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 12:58:04,816 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 12:58:04,816 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 16:05:58,322 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 16:05:58,328 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 16:05:58,328 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 16:05:58,331 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 16:05:58,332 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 16:05:58,332 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 17:23:40,897 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 17:23:40,902 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 17:23:40,903 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 17:23:40,906 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 17:23:40,908 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 17:23:40,909 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 17:39:47,494 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 17:39:47,495 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 17:39:47,495 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 17:39:47,499 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 17:39:47,501 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 17:39:47,501 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 18:49:12,788 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 18:49:12,791 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 18:49:12,791 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 18:49:12,797 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 18:49:12,798 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 18:49:12,798 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 19:08:26,355 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 19:08:26,361 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 19:08:26,361 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 19:08:26,367 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 19:08:26,368 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 19:08:26,369 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 19:20:21,380 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 19:20:21,381 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 19:20:21,381 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 19:20:21,384 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 19:20:21,385 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 19:20:21,385 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 20:01:58,630 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 20:01:58,636 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 20:01:58,636 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 20:01:58,638 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 20:01:58,638 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 20:01:58,639 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 20:16:23,304 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 20:16:23,310 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 20:16:23,310 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 20:16:23,313 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 20:16:23,313 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 20:16:23,314 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 21:26:11,675 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 21:26:11,680 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 21:26:11,680 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 21:26:11,682 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 21:26:11,683 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 21:26:11,683 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-01 22:17:07,268 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-01 22:17:07,273 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-01 22:17:07,274 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-01 22:17:07,278 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-01 22:17:07,278 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-01 22:17:07,279 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 08:16:41,213 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 08:16:41,218 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 08:16:41,219 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 08:16:41,222 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 08:16:41,223 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 08:16:41,223 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 11:38:54,902 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 11:38:54,908 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 11:38:54,908 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 11:38:54,910 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 11:38:54,910 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 11:38:54,910 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 11:38:55,701 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 11:38:55,719 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 11:38:55,719 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 11:38:55,722 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 11:38:55,726 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 11:38:55,727 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 12:48:57,349 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 12:48:57,353 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 12:48:57,353 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 12:48:57,356 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 12:48:57,357 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 12:48:57,357 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 12:48:57,415 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 12:48:57,416 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 12:48:57,416 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 12:48:57,419 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 12:48:57,419 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 12:48:57,419 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 13:19:24,882 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 13:19:24,883 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 13:19:24,884 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 13:19:24,888 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 13:19:24,888 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 13:19:24,888 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 13:19:46,197 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 13:19:46,210 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 13:19:46,210 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 13:19:46,215 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 13:19:46,216 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 13:19:46,217 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 13:19:47,277 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 13:19:47,277 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 13:19:47,277 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 13:19:47,280 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 13:19:47,281 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 13:19:47,281 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 13:20:10,672 [74922] DEBUG    matplotlib:275: [JupyterRequire] matplotlib data path: /Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data
2024-08-02 13:20:10,681 [74922] DEBUG    matplotlib:275: [JupyterRequire] CONFIGDIR=/Users/innakonar/.matplotlib
2024-08-02 13:20:10,684 [74922] DEBUG    matplotlib:1445: [JupyterRequire] interactive is False
2024-08-02 13:20:10,684 [74922] DEBUG    matplotlib:1446: [JupyterRequire] platform is darwin
2024-08-02 13:20:10,684 [74922] DEBUG    matplotlib:1447: [JupyterRequire] loaded modules: ['sys', 'builtins', '_frozen_importlib', '_imp', '_thread', '_warnings', '_weakref', '_io', 'marshal', 'posix', '_frozen_importlib_external', 'time', 'zipimport', '_codecs', 'codecs', 'encodings.aliases', 'encodings', 'encodings.utf_8', '_signal', 'encodings.latin_1', '_abc', 'abc', 'io', '__main__', '_stat', 'stat', '_collections_abc', 'genericpath', 'posixpath', 'os.path', 'os', '_sitebuiltins', '_locale', '_bootlocale', '_distutils_hack', 'types', 'importlib._bootstrap', 'importlib._bootstrap_external', 'warnings', 'importlib', 'importlib.machinery', '_heapq', 'heapq', 'itertools', 'keyword', '_operator', 'operator', 'reprlib', '_collections', 'collections', 'collections.abc', '_functools', 'functools', 'contextlib', 'enum', '_sre', 'sre_constants', 'sre_parse', 'sre_compile', 'copyreg', 're', 'typing.io', 'typing.re', 'typing', 'importlib.abc', 'importlib.util', 'mpl_toolkits', 'google', 'PyObjCTools', 'repoze', 'ruamel', 'sphinxcontrib', 'zope', 'site', '_weakrefset', 'weakref', 'pkgutil', 'runpy', 'ipykernel._version', '_json', 'json.scanner', 'json.decoder', 'json.encoder', 'json', 'errno', 'signal', 'threading', 'pwd', 'grp', '_posixsubprocess', 'select', 'math', 'selectors', 'subprocess', 'jupyter_client._version', '_ast', 'ast', '_opcode', 'opcode', 'dis', 'token', 'tokenize', 'linecache', 'inspect', 'traitlets.utils', 'traitlets.utils.getargspec', 'traitlets.utils.importstring', 'traitlets.utils.sentinel', 'traitlets.utils.bunch', 'traitlets.utils.descriptions', 'traitlets.traitlets', 'copy', 'traitlets.utils.decorators', 'traitlets._version', 'traitlets', 'concurrent', 'traceback', '_string', 'string', 'atexit', 'logging', 'concurrent.futures._base', 'concurrent.futures', '_socket', 'array', 'socket', '_ssl', '_struct', 'struct', 'binascii', 'base64', 'ssl', 'asyncio.constants', 'asyncio.format_helpers', 'asyncio.base_futures', 'asyncio.log', 'asyncio.coroutines', '_contextvars', 'contextvars', 'asyncio.exceptions', 'asyncio.base_tasks', '_asyncio', 'asyncio.events', 'asyncio.futures', 'asyncio.protocols', 'asyncio.transports', 'asyncio.sslproto', 'asyncio.locks', 'asyncio.tasks', 'asyncio.staggered', 'asyncio.trsock', 'asyncio.base_events', 'asyncio.runners', 'asyncio.queues', 'asyncio.streams', 'asyncio.subprocess', 'asyncio.threads', 'asyncio.base_subprocess', 'asyncio.selector_events', 'asyncio.unix_events', 'asyncio', '_queue', 'queue', 'platform', '_ctypes', 'ctypes._endian', 'ctypes', 'zmq.backend.select', '_cython_0_29_30', 'cython_runtime', 'zmq.error', 'zmq.backend.cython.context', 'zmq.backend.cython.message', '_bisect', 'bisect', '_random', '_sha512', 'random', '_compat_pickle', '_pickle', 'pickle', 'zmq.constants', 'zmq.backend.cython.socket', 'zmq.backend.cython._device', 'zmq.backend.cython._poll', 'zmq.backend.cython._proxy_steerable', 'zmq.backend.cython._version', 'zmq.backend.cython.error', 'zmq.backend.cython.utils', 'zmq.backend.cython', 'zmq.backend', 'zmq.sugar.attrsettr', 'zmq._typing', 'zmq.utils', 'zmq.utils.jsonapi', 'zmq.sugar.poll', 'zmq.sugar.socket', 'zmq.sugar.context', 'zmq.sugar.frame', 'zmq.sugar.tracker', 'zmq.sugar.version', 'zmq.sugar.stopwatch', 'zmq.sugar', 'zmq', 'zmq._future', 'zmq.asyncio', 'jupyter_client.channelsabc', '_hashlib', '_blake2', 'hashlib', 'hmac', 'pprint', '_datetime', 'datetime', 'gettext', 'argparse', 'traitlets.config.loader', 'textwrap', 'traitlets.utils.text', 'traitlets.config.configurable', 'traitlets.config.application', 'traitlets.config', 'traitlets.log', 'tornado', 'numbers', 'logging.handlers', 'html.entities', 'html', 'urllib', 'urllib.parse', 'zlib', 'tornado.speedups', 'tornado.util', 'tornado.escape', 'colorama.ansi', 'colorama.win32', 'colorama.winterm', 'colorama.ansitowin32', 'colorama.initialise', 'colorama', '_curses', 'curses', 'tornado.log', 'tornado.concurrent', 'tornado.ioloop', 'tornado.platform', 'tornado.gen', 'tornado.platform.asyncio', 'zmq.eventloop.ioloop', 'zmq.eventloop', 'zmq.eventloop.zmqstream', 'jupyter_client.adapter', 'dateutil._version', 'dateutil', '__future__', 'locale', 'calendar', 'six', '_decimal', 'decimal', 'dateutil._common', 'dateutil.relativedelta', 'six.moves', 'dateutil.tz._common', 'dateutil.tz._factories', 'dateutil.tz.tz', 'dateutil.tz', 'dateutil.parser._parser', 'dateutil.parser.isoparser', 'dateutil.parser', '_strptime', 'jupyter_client.jsonutil', 'jupyter_client.session', 'jupyter_client.channels', 'termios', 'getpass', 'jupyter_client.clientabc', 'fnmatch', 'glob', '_compression', '_bz2', 'bz2', '_lzma', 'lzma', 'shutil', 'tempfile', 'jupyter_core.version', 'jupyter_core', 'ntpath', 'pathlib', 'jupyter_core.paths', 'jupyter_client.localinterfaces', 'jupyter_client.utils', 'jupyter_client.connect', 'jupyter_client.client', 'jupyter_client.asynchronous.client', 'jupyter_client.asynchronous', 'jupyter_client.blocking.client', 'jupyter_client.blocking', 'jupyter_client.launcher', '_uuid', 'uuid', 'jupyter_client.managerabc', 'zipfile', 'configparser', 'entrypoints', 'jupyter_client.provisioning.provisioner_base', 'jupyter_client.provisioning.factory', 'jupyter_client.provisioning.local_provisioner', 'jupyter_client.provisioning', 'jupyter_client.kernelspec', 'jupyter_client.manager', 'jupyter_client.multikernelmanager', 'jupyter_client', 'ipykernel.connect', 'ipykernel', 'IPython.core', 'IPython.core.getipython', 'IPython.core.release', 'sysconfig', '_sysconfigdata__darwin_darwin', '_osx_support', 'pydoc', 'bdb', 'IPython.utils', 'IPython.utils.ipstruct', 'IPython.utils.coloransi', 'pygments', 'IPython.utils.colorable', 'IPython.utils.PyColorize', 'IPython.utils.encoding', 'IPython.utils.py3compat', 'IPython.core.excolors', 'IPython.testing', 'IPython.testing.skipdoctest', 'cmd', 'codeop', 'code', 'pdb', 'IPython.core.debugger', 'IPython.core.display_trap', 'pexpect.exceptions', 'pexpect.utils', 'pexpect.expect', 'tty', 'pty', 'fcntl', 'resource', 'ptyprocess.util', 'ptyprocess.ptyprocess', 'ptyprocess', 'pexpect.spawnbase', 'pexpect.pty_spawn', 'pexpect.run', 'pexpect', 'shlex', 'IPython.utils._process_common', 'IPython.utils._process_posix', 'IPython.utils.process', 'IPython.utils.decorators', 'IPython.utils.path', 'IPython.utils.data', 'IPython.utils.terminal', 'IPython.core.ultratb', 'IPython.utils._sysinfo', 'IPython.utils.sysinfo', 'IPython.core.crashhandler', 'IPython.utils.importstring', 'IPython.paths', 'IPython.core.profiledir', 'IPython.core.application', 'IPython.terminal', 'IPython.core.compilerop', 'IPython.core.error', 'IPython.utils.text', 'IPython.core.magic_arguments', 'getopt', 'mimetypes', 'IPython.core.display', 'IPython.core.page', 'IPython.lib.security', 'IPython.lib', 'IPython.lib.pretty', 'IPython.utils.openpy', 'IPython.utils.dir2', 'IPython.utils.wildcard', 'pygments.lexers._mapping', 'pygments.modeline', '_csv', 'csv', 'email', 'importlib.metadata', 'pygments.plugin', 'pygments.util', 'pygments.lexers', 'pygments.filter', 'pygments.token', 'pygments.filters', 'pygments.regexopt', 'pygments.lexer', 'pygments.unistring', 'pygments.lexers.python', 'pygments.formatters._mapping', 'pygments.formatters', 'pygments.styles._mapping', 'pygments.styles', 'pygments.formatter', 'pygments.formatters.html', 'IPython.core.oinspect', 'IPython.core.inputtransformer2', 'decorator', 'IPython.core.magic', 'pickleshare', 'IPython.core.autocall', 'IPython.core.macro', 'IPython.core.splitinput', 'IPython.core.prefilter', 'IPython.core.alias', 'IPython.core.builtin_trap', 'backcall.backcall', 'backcall', 'IPython.core.events', 'IPython.core.displayhook', 'IPython.core.displaypub', 'IPython.core.extensions', 'IPython.utils.sentinel', 'IPython.core.formatters', '_sqlite3', 'sqlite3.dbapi2', 'sqlite3', 'IPython.core.history', 'IPython.core.logger', 'IPython.core.payload', 'IPython.core.usage', 'IPython.lib.display', 'IPython.display', 'IPython.utils.capture', 'IPython.utils.io', 'IPython.core.hooks', 'IPython.utils.strdispatch', 'IPython.utils.syspathcontext', 'IPython.utils.tempdir', 'IPython.utils.contexts', 'IPython.core.async_helpers', 'IPython.core.interactiveshell', 'prompt_toolkit.application.current', 'prompt_toolkit.eventloop.utils', 'prompt_toolkit.eventloop.async_generator', 'wcwidth.table_wide', 'wcwidth.table_zero', 'wcwidth.unicode_versions', 'wcwidth.wcwidth', 'wcwidth', 'prompt_toolkit.utils', 'prompt_toolkit.eventloop.inputhook', 'prompt_toolkit.eventloop', 'prompt_toolkit.application.run_in_terminal', 'prompt_toolkit.selection', 'prompt_toolkit.clipboard.base', 'prompt_toolkit.clipboard.in_memory', 'prompt_toolkit.clipboard', 'prompt_toolkit.cache', 'prompt_toolkit.enums', 'prompt_toolkit.filters.base', 'prompt_toolkit.filters.app', 'prompt_toolkit.filters.cli', 'prompt_toolkit.filters.utils', 'prompt_toolkit.filters', 'prompt_toolkit.document', 'prompt_toolkit.auto_suggest', 'prompt_toolkit.data_structures', 'prompt_toolkit.styles.base', 'prompt_toolkit.styles.named_colors', 'prompt_toolkit.styles.style', 'prompt_toolkit.styles.defaults', 'prompt_toolkit.styles.pygments', 'colorsys', 'prompt_toolkit.styles.style_transformation', 'prompt_toolkit.styles', 'prompt_toolkit.output.color_depth', 'prompt_toolkit.output.base', 'prompt_toolkit.output.defaults', 'prompt_toolkit.output', 'prompt_toolkit.output.vt100', 'prompt_toolkit.mouse_events', 'prompt_toolkit.formatted_text.base', 'prompt_toolkit.formatted_text.ansi', 'xml', 'xml.dom.domreg', 'xml.dom', 'xml.dom.minicompat', 'xml.dom.NodeFilter', 'xml.dom.xmlbuilder', 'xml.dom.minidom', 'prompt_toolkit.formatted_text.html', 'prompt_toolkit.formatted_text.pygments', 'prompt_toolkit.formatted_text.utils', 'prompt_toolkit.formatted_text', 'prompt_toolkit.completion.base', 'prompt_toolkit.completion.deduplicate', 'prompt_toolkit.completion.filesystem', 'prompt_toolkit.completion.word_completer', 'prompt_toolkit.completion.fuzzy_completer', 'prompt_toolkit.completion.nested', 'prompt_toolkit.completion', 'prompt_toolkit.history', 'prompt_toolkit.keys', 'prompt_toolkit.key_binding.key_bindings', 'prompt_toolkit.key_binding.key_processor', 'prompt_toolkit.key_binding', 'prompt_toolkit.key_binding.vi_state', 'prompt_toolkit.search', 'prompt_toolkit.validation', 'prompt_toolkit.buffer', 'prompt_toolkit.input.base', 'prompt_toolkit.input.defaults', 'prompt_toolkit.input', 'prompt_toolkit.input.typeahead', 'prompt_toolkit.key_binding.bindings', 'prompt_toolkit.key_binding.bindings.scroll', 'prompt_toolkit.key_binding.bindings.page_navigation', 'prompt_toolkit.lexers.base', 'prompt_toolkit.lexers.pygments', 'prompt_toolkit.lexers', 'prompt_toolkit.layout.utils', 'prompt_toolkit.layout.processors', 'prompt_toolkit.layout.controls', 'prompt_toolkit.layout.dimension', 'prompt_toolkit.layout.margins', 'prompt_toolkit.layout.mouse_handlers', 'prompt_toolkit.layout.screen', 'prompt_toolkit.layout.containers', 'prompt_toolkit.layout.layout', 'prompt_toolkit.layout.menus', 'prompt_toolkit.layout.scrollable_pane', 'prompt_toolkit.layout', 'prompt_toolkit.key_binding.bindings.completion', 'prompt_toolkit.key_binding.bindings.named_commands', 'prompt_toolkit.key_binding.bindings.basic', 'prompt_toolkit.key_binding.bindings.cpr', 'prompt_toolkit.key_binding.bindings.emacs', 'prompt_toolkit.key_binding.bindings.mouse', 'prompt_toolkit.input.ansi_escape_sequences', 'prompt_toolkit.input.vt100_parser', 'prompt_toolkit.key_binding.digraphs', 'prompt_toolkit.key_binding.bindings.vi', 'prompt_toolkit.key_binding.defaults', 'prompt_toolkit.key_binding.emacs_state', 'prompt_toolkit.layout.dummy', 'prompt_toolkit.renderer', 'prompt_toolkit.application.application', 'prompt_toolkit.application.dummy', 'prompt_toolkit.application', 'prompt_toolkit.key_binding.bindings.focus', 'prompt_toolkit.widgets.toolbars', 'prompt_toolkit.widgets.base', 'prompt_toolkit.widgets.dialogs', 'prompt_toolkit.widgets.menus', 'prompt_toolkit.widgets', 'prompt_toolkit.shortcuts.dialogs', 'prompt_toolkit.shortcuts.progress_bar.formatters', 'prompt_toolkit.shortcuts.progress_bar.base', 'prompt_toolkit.shortcuts.progress_bar', 'prompt_toolkit.key_binding.bindings.auto_suggest', 'prompt_toolkit.key_binding.bindings.open_in_editor', 'prompt_toolkit.shortcuts.prompt', 'prompt_toolkit.shortcuts.utils', 'prompt_toolkit.shortcuts', 'prompt_toolkit', 'prompt_toolkit.patch_stdout', 'pygments.style', 'unicodedata', 'IPython.core.latex_symbols', 'IPython.utils.generics', 'parso.utils', 'parso.tree', 'parso.python', 'parso.python.token', 'parso.python.tokenize', 'parso.pgen2.grammar_parser', 'parso.pgen2.generator', 'parso.pgen2', 'parso.parser', 'parso._compatibility', 'difflib', 'parso.python.prefix', 'parso.python.tree', 'parso.python.parser', 'parso.python.diff', 'gc', 'parso.cache', 'parso.normalizer', 'parso.python.errors', 'parso.python.pep8', 'parso.file_io', 'parso.grammar', 'parso', 'jedi.parser_utils', 'jedi.debug', 'jedi.settings', 'jedi.cache', 'jedi.file_io', 'jedi.inference.cache', 'jedi.inference.helpers', 'jedi.inference.utils', 'jedi.inference.base_value', 'jedi.inference.sys_path', 'jedi.inference.recursion', 'jedi.inference.flow_analysis', 'jedi.common', 'jedi.inference.lazy_value', 'jedi.inference.docstrings', 'jedi.plugins', 'jedi.inference.names', 'jedi.inference.filters', 'jedi.inference.compiled.getattr_static', 'jedi.inference.compiled.access', 'jedi.inference.signature', 'jedi.inference.context', 'jedi.inference.compiled.value', 'jedi.inference.compiled', 'jedi.inference.analysis', 'jedi.inference.gradual', 'jedi.inference.value.module', 'jedi.inference.value.dynamic_arrays', 'jedi.inference.value.iterable', 'jedi.inference.arguments', 'jedi.inference.parser_cache', 'jedi.inference.gradual.generics', 'jedi.inference.value.function', 'jedi.inference.value.klass', 'jedi.inference.value.instance', 'jedi.inference.value', 'jedi.inference.gradual.base', 'jedi.inference.gradual.type_var', 'jedi.inference.gradual.typing', 'jedi.inference.gradual.stub_value', 'jedi.inference.gradual.typeshed', 'jedi._compatibility', 'jedi.inference.compiled.subprocess.functions', 'jedi.api.exceptions', 'jedi.inference.compiled.subprocess', 'jedi.inference.imports', 'jedi.inference.param', 'jedi.inference.gradual.annotation', 'jedi.inference.value.decorator', 'jedi.inference.syntax_tree', 'jedi.inference', 'jedi.inference.gradual.conversion', 'jedi.inference.compiled.mixed', 'pydoc_data', 'pydoc_data.topics', 'jedi.api.keywords', 'jedi.api.completion_cache', 'jedi.api.helpers', 'jedi.api.classes', 'jedi.api.interpreter', 'jedi.api.strings', 'jedi.api.file_name', 'jedi.inference.docstring_utils', 'jedi.api.completion', 'filecmp', 'jedi.api.environment', 'jedi.inference.references', 'jedi.api.project', 'jedi.api.errors', 'jedi.api.refactoring', 'jedi.api.refactoring.extract', 'jedi.inference.gradual.utils', 'jedi.api', 'jedi.plugins.stdlib', 'jedi.plugins.flask', 'jedi.plugins.pytest', 'jedi.plugins.django', 'jedi.plugins.registry', 'jedi', 'IPython.core.completer', 'IPython.terminal.ptutils', 'IPython.terminal.shortcuts', 'concurrent.futures.thread', 'IPython.terminal.debugger', 'IPython.lib.clipboard', 'IPython.terminal.magics', 'IPython.terminal.pt_inputhooks', 'IPython.terminal.prompts', 'IPython.terminal.interactiveshell', 'IPython.core.magics.auto', 'IPython.core.magics.basic', 'http', 'email.errors', 'email.quoprimime', 'email.base64mime', 'quopri', 'email.encoders', 'email.charset', 'email.header', 'email._parseaddr', 'email.utils', 'email._policybase', 'email.feedparser', 'email.parser', 'uu', 'email._encoded_words', 'email.iterators', 'email.message', 'http.client', 'urllib.response', 'urllib.error', '_scproxy', 'urllib.request', 'IPython.core.magics.code', 'IPython.core.magics.config', 'IPython.core.magics.display', 'timeit', '_lsprof', 'profile', 'cProfile', 'dataclasses', 'pstats', 'IPython.utils.module_paths', 'IPython.utils.timing', 'IPython.core.magics.execution', 'IPython.core.magics.extension', 'IPython.core.magics.history', 'IPython.core.magics.logging', 'IPython.core.magics.namespace', 'IPython.core.magics.osm', 'IPython.core.magics.packaging', 'IPython.core.pylabtools', 'IPython.core.magics.pylab', 'IPython.lib.backgroundjobs', 'IPython.core.magics.script', 'IPython.core.magics', 'IPython.core.shellapp', 'IPython.extensions', 'IPython.extensions.storemagic', 'IPython.terminal.ipapp', 'IPython.terminal.embed', 'IPython.utils.frame', 'IPython', 'ipykernel.control', 'ipykernel.heartbeat', 'ipykernel.iostream', 'IPython.utils.tokenutil', 'ipykernel.jsonutil', 'psutil._common', 'psutil._compat', 'psutil._psposix', 'psutil._psutil_osx', 'psutil._psutil_posix', 'psutil._psosx', 'psutil', 'tornado.locks', 'tornado.queues', 'ipykernel.kernelbase', 'ipykernel.comm.comm', 'ipykernel.comm.manager', 'ipykernel.comm', 'ipykernel.compiler', 'debugpy._version', 'debugpy.common', 'debugpy.common.json', 'debugpy.common.fmt', 'debugpy.common.compat', 'debugpy', 'debugpy._vendored._util', 'debugpy._vendored', '_pydevd_bundle', 'encodings.ascii', 'stringprep', 'encodings.idna', '_pydevd_bundle.pydevd_vm_type', '_pydev_imps', 'xmlrpc', 'xml.parsers', 'pyexpat.errors', 'pyexpat.model', 'pyexpat', 'xml.parsers.expat.model', 'xml.parsers.expat.errors', 'xml.parsers.expat', 'gzip', 'xmlrpc.client', 'socketserver', 'http.server', 'xmlrpc.server', '_pydev_imps._pydev_saved_modules', '_pydevd_bundle.pydevd_constants', '_pydev_bundle', '_pydev_runfiles', '_pydevd_frame_eval', 'pydev_ipython', 'pydevd_concurrency_analyser', 'plistlib', 'pkg_resources.extern', 'pkg_resources._vendor', 'pkg_resources._vendor.jaraco', 'pkg_resources.extern.jaraco', 'importlib._common', 'importlib.resources', 'pkg_resources._vendor.more_itertools.recipes', 'pkg_resources._vendor.more_itertools.more', 'pkg_resources._vendor.more_itertools', 'pkg_resources.extern.more_itertools', 'pkg_resources.extern.jaraco.functools', 'pkg_resources._vendor.backports', 'pkg_resources.extern.backports', 'pkg_resources._vendor.backports.tarfile', 'pkg_resources.extern.jaraco.context', 'pkg_resources.extern.jaraco.text', 'pkg_resources._vendor.packaging', 'pkg_resources.extern.packaging', 'pkg_resources._vendor.packaging._elffile', 'pkg_resources._vendor.packaging._manylinux', 'pkg_resources._vendor.packaging._musllinux', 'pkg_resources._vendor.packaging.tags', 'pkg_resources._vendor.packaging._structures', 'pkg_resources._vendor.packaging.version', 'pkg_resources._vendor.packaging.utils', 'pkg_resources._vendor.packaging.specifiers', 'pkg_resources._vendor.packaging._tokenizer', 'pkg_resources._vendor.packaging._parser', 'pkg_resources._vendor.packaging.markers', 'pkg_resources._vendor.packaging.requirements', 'pkg_resources._vendor.platformdirs.api', 'pkg_resources._vendor.platformdirs.version', 'pkg_resources._vendor.platformdirs.macos', 'pkg_resources._vendor.platformdirs', 'pkg_resources.extern.platformdirs', 'pkg_resources', 'pydevd_plugins', '_pydev_bundle.pydev_log', '_pydev_bundle._pydev_filesystem_encoding', '_pydevd_bundle.pydevd_comm_constants', 'pydevd_file_utils', '_pydev_imps._pydev_execfile', '_pydevd_bundle.pydevd_exec2', '_pydev_bundle.pydev_imports', '_pydev_bundle.pydev_is_thread_alive', '_pydev_bundle.pydev_override', 'pydevd_plugins.extensions', '_pydevd_bundle.pydevd_extension_utils', '_pydevd_bundle.pydevd_frame_utils', '_pydevd_bundle.pydevd_filtering', '_pydevd_bundle.pydevd_io', '_pydevd_bundle.pydevd_utils', '_pydev_bundle._pydev_tipper_common', '_pydev_bundle._pydev_imports_tipper', '_pydev_bundle._pydev_calltip_util', '_pydevd_bundle.pydevd_safe_repr', '_pydevd_bundle.pydevd_resolver', '_pydevd_bundle.pydevd_extension_api', '_pydevd_bundle.pydevd_xml', '_pydevd_bundle.pydevd_dont_trace', '_pydevd_frame_eval.vendored', '_pydevd_frame_eval.vendored.bytecode.flags', '_pydevd_frame_eval.vendored.bytecode.instr', '_pydevd_frame_eval.vendored.bytecode.bytecode', '_pydevd_frame_eval.vendored.bytecode.concrete', '_pydevd_frame_eval.vendored.bytecode.cfg', '_pydevd_frame_eval.vendored.bytecode', '_pydevd_bundle.pydevd_bytecode_utils', '_pydevd_bundle.pydevd_cython', '_pydevd_bundle.pydevd_cython_wrapper', '_pydevd_bundle.pydevd_additional_thread_info', '_pydevd_bundle.pydevd_thread_lifecycle', '_pydevd_bundle.pydevd_save_locals', '_pydevd_bundle.pydevd_defaults', '_pydev_bundle.pydev_monkey', 'pydevd_tracing', '_pydevd_bundle.pydevd_daemon_thread', '_pydevd_bundle.pydevd_timeout', '_pydevd_bundle.pydevd_vars', '_pydev_bundle.pydev_console_utils', '_pydevd_bundle.pydevd_import_class', '_pydevd_bundle.pydevd_breakpoints', '_pydevd_bundle.pydevd_custom_frames', '_pydevd_bundle.pydevd_dont_trace_files', '_pydevd_bundle.pydevd_net_command', '_pydev_bundle.pydev_umd', 'pydevconsole', '_pydev_bundle._pydev_completer', '_pydevd_bundle.pydevd_net_command_factory_xml', '_pydevd_bundle.pydevd_frame', '_pydevd_bundle.pydevd_additional_thread_info_regular', '_pydevd_bundle.pydevd_trace_dispatch', '_pydevd_frame_eval.pydevd_frame_eval_main', '_pydevd_bundle.pydevd_source_mapping', 'pydevd_concurrency_analyser.pydevd_thread_wrappers', 'pydevd_concurrency_analyser.pydevd_concurrency_logger', '_pydevd_bundle._debug_adapter', '_pydevd_bundle._debug_adapter.pydevd_schema_log', '_pydevd_bundle._debug_adapter.pydevd_base_schema', '_pydevd_bundle._debug_adapter.pydevd_schema', '_pydevd_bundle.pydevd_reload', '_pydev_bundle.fsnotify', '_pydevd_bundle.pydevd_console', '_pydevd_bundle.pydevd_comm', '_pydevd_bundle.pydevd_net_command_factory_json', '_pydevd_bundle.pydevd_collect_bytecode_info', '_pydevd_bundle.pydevd_api', '_pydevd_bundle.pydevd_json_debug_options', '_pydevd_bundle.pydevd_process_net_command_json', '_pydevd_bundle.pydevd_traceproperty', '_pydevd_bundle.pydevd_process_net_command', '_pydevd_bundle.pydevd_suspended_frames', '_pydevd_bundle.pydevd_trace_api', 'pydevd_plugins.django_debug', 'pydevd_plugins.jinja2_debug', '_pydevd_bundle.pydevd_plugin_utils', 'pydevd_plugins.extensions.types', 'pydevd_plugins.extensions.types.pydevd_helpers', 'pydevd_plugins.extensions.types.pydevd_plugin_numpy_types', 'pydevd_plugins.extensions.types.pydevd_plugins_django_form_str', 'pydevd', 'debugpy._vendored.force_pydevd', 'debugpy.server', 'debugpy.adapter', 'debugpy.common.timestamp', 'debugpy.common.util', 'debugpy.common.log', 'debugpy.common.sockets', 'debugpy.server.api', 'ipykernel.debugger', 'packaging.__about__', 'packaging', 'packaging._structures', 'packaging.version', 'ipykernel.eventloops', 'IPython.core.payloadpage', 'ipykernel.displayhook', 'ipykernel.zmqshell', 'ipykernel.ipkernel', 'ipykernel.parentpoller', 'ipykernel.kernelapp', 'faulthandler', 'IPython.core.completerlib', 'setuptools._distutils', 'distutils._functools', 'distutils.compat.py38', 'distutils.compat', 'distutils.compat.py39', 'distutils.errors', 'distutils._modified', 'distutils._log', 'distutils.dir_util', 'distutils.debug', 'distutils.spawn', 'distutils.archive_util', 'distutils.file_util', 'distutils.util', 'distutils.cmd', 'distutils.config', 'distutils._vendor', 'distutils._vendor.packaging', 'distutils._vendor.packaging._elffile', 'distutils._vendor.packaging._manylinux', 'distutils._vendor.packaging._musllinux', 'distutils._vendor.packaging.tags', 'distutils._vendor.packaging._structures', 'distutils._vendor.packaging.version', 'distutils._vendor.packaging.utils', 'distutils.fancy_getopt', 'distutils.dist', 'distutils.extension', 'distutils.core', '_distutils_hack.override', 'distutils.log', 'distutils.filelist', 'setuptools.monkey', 'setuptools.logging', 'setuptools.extern', 'setuptools._vendor', 'setuptools._vendor.zipp', 'setuptools._vendor.importlib_metadata._functools', 'setuptools._vendor.importlib_metadata._text', 'setuptools._vendor.importlib_metadata._compat', 'setuptools._vendor.importlib_metadata._adapters', 'setuptools._vendor.importlib_metadata._meta', 'setuptools._vendor.importlib_metadata._py39compat', 'setuptools._vendor.importlib_metadata._collections', 'setuptools._vendor.importlib_metadata._itertools', 'setuptools._vendor.importlib_metadata', 'setuptools.extern.importlib_metadata', 'zipp', 'importlib_metadata._functools', 'importlib_metadata._text', 'importlib_metadata._adapters', 'importlib_metadata._compat', 'importlib_metadata._meta', 'importlib_metadata._collections', 'importlib_metadata._itertools', 'importlib_metadata', 'setuptools._importlib', 'setuptools.version', 'setuptools._imp', 'setuptools._vendor.packaging', 'setuptools.extern.packaging', 'setuptools.extern.packaging._structures', 'setuptools.extern.packaging.version', 'setuptools.depends', 'setuptools._path', 'setuptools.discovery', 'distutils.command', 'setuptools._vendor.more_itertools.recipes', 'setuptools._vendor.more_itertools.more', 'setuptools._vendor.more_itertools', 'setuptools.extern.more_itertools', 'setuptools._vendor.ordered_set', 'setuptools.extern.ordered_set', 'setuptools._vendor.packaging._elffile', 'setuptools._vendor.packaging._manylinux', 'setuptools._vendor.packaging._musllinux', 'setuptools.extern.packaging.tags', 'setuptools.extern.packaging.utils', 'setuptools.extern.packaging.specifiers', 'setuptools.extern.packaging._tokenizer', 'setuptools.extern.packaging._parser', 'setuptools.extern.packaging.markers', 'setuptools.errors', 'setuptools._vendor.jaraco', 'setuptools.extern.jaraco', 'setuptools.extern.jaraco.functools', 'setuptools._vendor.backports', 'setuptools.extern.backports', 'setuptools._vendor.backports.tarfile', 'setuptools.extern.jaraco.context', 'setuptools.extern.jaraco.text', 'setuptools._itertools', 'setuptools._entry_points', 'setuptools._normalization', 'setuptools.extern.packaging.requirements', 'setuptools._reqs', 'distutils.command.bdist', 'setuptools.command', 'setuptools.warnings', 'setuptools.config.expand', 'setuptools.config.setupcfg', 'setuptools.config', 'email._header_value_parser', 'email.headerregistry', 'setuptools.config._apply_pyprojecttoml', 'setuptools.config.pyprojecttoml', 'setuptools.dist', 'setuptools.extension', 'setuptools._core_metadata', 'setuptools.msvc', 'setuptools', 'distutils', 'distutils.version', 'ctypes.macholib', 'ctypes.macholib.framework', 'ctypes.macholib.dylib', 'ctypes.macholib.dyld', 'ctypes.util', 'appnope._nope', 'appnope', 'storemagic', 'logging.config', 'syslog', 'pythonjsonlogger', 'pythonjsonlogger.jsonlogger', 'daiquiri.types', 'daiquiri.formatter', 'daiquiri.handlers', 'daiquiri.output', 'daiquiri', 'jupyter_require.__about__', 'csscompressor', 'jupyter_require.core', 'jupyter_require.notebook', 'jupyter_nbutils.__about__', 'jupyter_nbutils.config', 'jupyter_nbutils.utils', 'jupyter_nbutils', 'jupyter_require.magic', 'jupyter_require', 'ultralytics', 'ultralytics.data', 'ultralytics.data.base', 'multiprocessing.process', 'multiprocessing.reduction', 'multiprocessing.context', '__mp_main__', 'multiprocessing', 'multiprocessing.util', '_multiprocessing', 'multiprocessing.connection', 'multiprocessing.pool', 'numpy._globals', 'numpy.__config__', 'numpy._distributor_init', 'numpy._version', 'numpy.version', 'numpy.core._multiarray_umath', 'numpy.compat._inspect', 'numpy.compat.py3k', 'numpy.compat', 'numpy.core.overrides', 'numpy.core.multiarray', 'numpy.core.umath', 'numpy.core._string_helpers', 'numpy.core._dtype', 'numpy.core._type_aliases', 'numpy.core.numerictypes', 'numpy.core._exceptions', 'numpy.core._ufunc_config', 'numpy.core._methods', 'numpy.core.fromnumeric', 'numpy.core.shape_base', 'numpy.core.arrayprint', 'numpy.core._asarray', 'numpy.core.numeric', 'numpy.core.defchararray', 'numpy.core.records', 'numpy.core.memmap', 'numpy.core.function_base', 'numpy.core._machar', 'numpy.core.getlimits', 'numpy.core.einsumfunc', 'numpy.core._multiarray_tests', 'numpy.core._add_newdocs', 'numpy.core._add_newdocs_scalars', 'numpy.core._dtype_ctypes', 'numpy.core._internal', 'numpy._pytesttester', 'numpy.core', 'numpy.lib.mixins', 'numpy.lib.ufunclike', 'numpy.lib.type_check', 'numpy.lib.scimath', 'numpy.lib.stride_tricks', 'numpy.lib.twodim_base', 'numpy.linalg._umath_linalg', 'numpy.linalg.linalg', 'numpy.linalg', 'numpy.matrixlib.defmatrix', 'numpy.matrixlib', 'numpy.lib.histograms', 'numpy.lib.function_base', 'numpy.lib.index_tricks', 'numpy.lib.nanfunctions', 'numpy.lib.shape_base', 'numpy.lib.polynomial', 'numpy.lib.utils', 'numpy.lib.arraysetops', 'numpy.lib.format', 'numpy.lib._datasource', 'numpy.lib._iotools', 'numpy.lib.npyio', 'numpy.lib.arrayterator', 'numpy.lib.arraypad', 'numpy.lib._version', 'numpy.lib', 'numpy.fft._pocketfft_internal', 'numpy.fft._pocketfft', 'numpy.fft.helper', 'numpy.fft', 'numpy.polynomial.polyutils', 'numpy.polynomial._polybase', 'numpy.polynomial.polynomial', 'numpy.polynomial.chebyshev', 'numpy.polynomial.legendre', 'numpy.polynomial.hermite', 'numpy.polynomial.hermite_e', 'numpy.polynomial.laguerre', 'numpy.polynomial', '_cython_0_29_35', 'numpy.random._common', 'secrets', 'numpy.random.bit_generator', 'numpy.random._bounded_integers', 'numpy.random._mt19937', 'numpy.random.mtrand', 'numpy.random._philox', 'numpy.random._pcg64', 'numpy.random._sfc64', 'numpy.random._generator', 'numpy.random._pickle', 'numpy.random', 'numpy.ctypeslib', 'numpy.ma.core', 'numpy.ma.extras', 'numpy.ma', 'numpy', 'cv2.load_config_py3', 'cv2.version', 'numpy._utils._convertions', 'numpy._utils', 'numpy._utils._inspect', 'numpy.exceptions', 'numpy._core._exceptions', 'numpy.dtypes', 'numpy._core._multiarray_umath', 'numpy._core.overrides', 'numpy._core.multiarray', 'numpy._core.umath', 'numpy._core._string_helpers', 'numpy._core._type_aliases', 'numpy._core._dtype', 'numpy._core.numerictypes', 'numpy._core._ufunc_config', 'numpy._core._methods', 'numpy._core.fromnumeric', 'numpy._core.shape_base', 'numpy._core.arrayprint', 'numpy._core._asarray', 'numpy._core.numeric', 'numpy._core.records', 'numpy._core.memmap', 'numpy._core.function_base', 'numpy._core._machar', 'numpy._core.getlimits', 'numpy._core.einsumfunc', 'numpy._core._multiarray_tests', 'numpy._core._add_newdocs', 'numpy._core._add_newdocs_scalars', 'numpy._core._dtype_ctypes', 'numpy._core._internal', 'numpy._core', 'cv2.gapi.core', 'cv2.gapi.core.cpu', 'cv2.gapi.core.fluid', 'cv2.gapi.core.ocl', 'cv2.gapi.ie', 'cv2.gapi.ie.detail', 'cv2.gapi.imgproc', 'cv2.gapi.imgproc.fluid', 'cv2.gapi.oak', 'cv2.gapi.onnx', 'cv2.gapi.onnx.ep', 'cv2.gapi.ot', 'cv2.gapi.ot.cpu', 'cv2.gapi.ov', 'cv2.gapi.own', 'cv2.gapi.own.detail', 'cv2.gapi.render', 'cv2.gapi.render.ocv', 'cv2.gapi.streaming', 'cv2.gapi.video', 'cv2.gapi.wip', 'cv2.gapi.wip.draw', 'cv2.gapi.wip.gst', 'cv2.gapi.wip.onevpl', 'cv2.utils.fs', 'cv2.utils.nested', 'cv2.rapid', 'cv2.misc.version', 'cv2.misc', 'cv2.line_descriptor', 'cv2.structured_light', 'cv2.reg', 'cv2.wechat_qrcode', 'cv2.xphoto', 'cv2.aruco', 'cv2.mat_wrapper', 'cv2.parallel', 'cv2.dnn_superres', 'cv2.colored_kinfu', 'cv2.phase_unwrapping', 'cv2.stereo', 'cv2.flann', 'cv2.plot', 'cv2.quality', 'cv2.face', 'cv2.segmentation', 'cv2.xfeatures2d', 'cv2.cuda', 'cv2.multicalib', 'cv2.intensity_transform', 'cv2.gapi', 'cv2.optflow', 'cv2.datasets', 'cv2.bgsegm', 'cv2.img_hash', 'cv2.ximgproc', 'cv2.legacy', 'cv2.mcc', 'cv2.utils', 'cv2.motempl', 'cv2.ccm', 'cv2.ogl', 'cv2.typing', 'cv2.samples', 'cv2.dynafu', 'cv2.detail', 'cv2.large_kinfu', 'cv2.ml', 'cv2.fisheye', 'cv2.ipp', 'cv2.hfs', 'cv2.ppf_match_3d', 'cv2.saliency', 'cv2.omnidir', 'cv2.dnn', 'cv2.videoio_registry', 'cv2.rgbd', 'cv2.text', 'cv2.linemod', 'cv2.kinfu', 'cv2.barcode', 'cv2.ft', 'cv2.bioinspired', 'cv2.data', 'cv2.Error', 'cv2.videostab', 'cv2.dpm', 'cv2.ocl', 'cv2', 'torch._utils', 'torch._utils_internal', 'torch.version', 'torch.torch_version', 'torch._C._onnx', 'torch._C._jit', 'torch._C._jit_tree_views', 'torch._C._te', 'torch._C._monitor', 'torch._C._functorch', 'torch._C._profiler', 'torch._C.cpp', 'torch._C.cpp.nn', 'torch._C._lazy', 'torch._C._lazy_ts_backend', 'torch._C._itt', 'torch._C._verbose', 'torch._C', 'torch._C._dynamo', 'torch._C._fft', 'torch._C._linalg', 'torch._C._nested', 'torch._C._nn', 'torch._C._return_types', 'torch._C._sparse', 'torch._C._special', 'torch.utils.throughput_benchmark', 'torch.utils._crash_handler', 'torch.utils.cpp_backtrace', 'torch.utils.backend_registration', 'torch.utils', 'torch.utils.hooks', 'torch._namedtensor_internals', 'torch.overrides', 'torch.utils.dlpack', 'torch._tensor', 'torch.types', 'torch.storage', 'torch.random', 'tarfile', 'torch._sources', 'typing_extensions', 'torch._weights_only_unpickler', 'torch.serialization', 'torch._tensor_str', 'torch.amp.autocast_mode', 'torch.amp', 'torch.cuda._utils', 'torch.utils._pytree', 'torch.cuda.graphs', 'torch.cuda.streams', 'torch.cuda._memory_viz', 'torch.cuda.memory', 'torch.cuda.random', 'torch.cuda.sparse', 'torch.cuda.profiler', 'torch.cuda.nvtx', 'torch.cuda.amp.autocast_mode', 'torch.cuda.amp.common', 'torch.cuda.amp.grad_scaler', 'torch.cuda.amp', 'torch.cuda.jiterator', 'torch.cuda', 'torch.sparse', 'torch.backends', 'opt_einsum.parser', 'opt_einsum.helpers', 'opt_einsum.blas', 'opt_einsum.paths', 'opt_einsum.path_random', 'opt_einsum.sharing', 'opt_einsum.backends.cupy', 'opt_einsum.backends.object_arrays', 'opt_einsum.backends.jax', 'opt_einsum.backends.tensorflow', 'opt_einsum.backends.theano', 'opt_einsum.backends.torch', 'opt_einsum.backends.dispatch', 'opt_einsum.backends', 'opt_einsum.contract', 'opt_einsum._version', 'opt_einsum', 'torch.backends.opt_einsum', 'torch.nn.parameter', 'torch.nn.modules.module', 'torch._VF', 'torch._torch_docs', 'torch._C._distributed_c10d', 'torch.autograd.variable', 'torch._functorch', 'torch.utils._contextlib', 'torch.autograd.grad_mode', 'torch.autograd.forward_ad', 'torch._functorch.pyfunctorch', 'torch._ops', 'torch._functorch.utils', 'torch._functorch.pytree_hacks', 'torch._functorch.vmap', 'torch._functorch.autograd_function', 'torch.autograd.function', 'cmath', 'torch.testing._comparison', 'torch.testing._creation', 'torch.testing', 'torch._vmap_internals', 'torch.autograd.gradcheck', 'torch.autograd.anomaly_mode', 'torch.autograd.functional', 'torch.utils._python_dispatch', 'torch.autograd.graph', 'torch._C._autograd', 'torch.autograd.profiler_util', 'torch.futures', 'torch.autograd.profiler', 'torch.autograd', 'torch.distributed.constants', 'torch.distributed.logging_handlers', 'torch.distributed.c10d_error_logger', 'torch.distributed.rendezvous', 'torch.distributed.distributed_c10d', 'torch.distributed.remote_device', 'torch.distributed', 'torch._C._distributed_rpc', 'torch.distributed.rpc.internal', 'torch.distributed.rpc.constants', 'torch.distributed.rpc._utils', 'torch.distributed.rpc.api', 'torch.distributed.rpc.backend_registry', 'torch.distributed.rpc.functions', 'torch._C._distributed_autograd', 'torch.distributed.autograd', 'torch.distributed.rpc.options', 'torch.autograd.profiler_legacy', 'torch.distributed.rpc.server_process_global_profiler', 'torch.distributed.rpc', 'pickletools', 'torch.package._digraph', 'torch.package._importlib', 'torch.package._mangling', 'torch.package.importer', 'torch.package._package_pickler', 'torch.package._stdlib', 'torch.package.find_file_dependencies', 'torch.package.glob_group', 'torch.package.package_exporter', 'torch.package.analyze.find_first_use_of_broken_modules', 'torch.package.analyze.trace_dependencies', 'torch.package.analyze', 'torch.package.analyze.is_from_package', 'torch.package.file_structure_representation', 'torch.package._directory_reader', 'torch.package._package_unpickler', 'torch.package.package_importer', 'torch.package', 'torch._awaits', 'torch._jit_internal', 'torch.nn._reduction', 'torch.nn.modules.utils', 'torch.nn.grad', 'torch.nn.functional', 'torch.nn.init', 'torch.nn.modules.lazy', 'torch.nn.modules.linear', 'torch.nn.common_types', 'torch.nn.modules.conv', 'torch.nn.modules.activation', 'torch.nn.modules.distance', 'torch.nn.modules.loss', 'torch.nn.modules.container', 'torch.nn.modules.pooling', 'torch.nn.modules._functions', 'torch.nn.modules.batchnorm', 'torch.nn.modules.instancenorm', 'torch.nn.modules.normalization', 'torch.nn.modules.dropout', 'torch.nn.modules.padding', 'torch.nn.modules.sparse', 'torch.nn.utils.rnn', 'torch.utils._foreach_utils', 'torch.nn.utils.clip_grad', 'torch.nn.utils.weight_norm', 'torch.nn.utils.convert_parameters', 'torch.nn.utils.spectral_norm', 'torch.nn.utils.fusion', 'torch.nn.utils.memory_format', 'torch.nn.utils.parametrize', 'torch.nn.utils.parametrizations', 'torch.nn.utils.init', 'torch.nn.utils._named_member_accessor', 'torch.nn.utils.stateless', 'torch.nn.utils', 'torch.nn.modules.rnn', 'torch.nn.modules.pixelshuffle', 'torch.nn.modules.upsampling', 'torch.nn.modules.fold', 'torch.nn.modules.adaptive', 'torch.nn.modules.transformer', 'torch.nn.modules.flatten', 'torch.nn.modules.channelshuffle', 'torch.nn.modules', 'torch.nn.parallel.parallel_apply', 'torch.cuda.nccl', 'torch.nn.parallel.comm', 'torch.nn.parallel.replicate', 'torch.nn.parallel._functions', 'torch.nn.parallel.scatter_gather', 'torch.nn.parallel.data_parallel', 'torch.distributed.algorithms.join', 'torch.distributed.algorithms', 'torch.distributed.utils', 'torch.nn.parallel._replicated_tensor_ddp_utils', 'torch.nn.parallel.distributed', 'torch.nn.parallel', 'torch.nn', 'torch._linalg_utils', 'torch._lowrank', 'torch.functional', 'torch.cpu.amp.autocast_mode', 'torch.cpu.amp', 'torch.cpu', 'torch.fft', 'torch.nested', 'torch.signal.windows.windows', 'torch.signal.windows', 'torch.signal', 'torch.optim.optimizer', 'torch.optim.adadelta', 'torch.optim.adagrad', 'torch.optim.adam', 'torch.optim.adamw', 'torch.optim.adamax', 'torch.optim.asgd', 'torch.optim.nadam', 'torch.optim.radam', 'torch.optim.rmsprop', 'torch.optim.rprop', 'torch.optim.sgd', 'torch.optim._functional', 'torch.optim.sparse_adam', 'torch.optim.lbfgs', 'torch.optim.lr_scheduler', 'torch.optim.swa_utils', 'torch.optim', 'torch.optim._multi_tensor', 'multiprocessing.resource_sharer', 'torch.multiprocessing.reductions', 'torch.multiprocessing.spawn', 'torch.multiprocessing', 'torch.special', 'torch.utils.backcompat', 'torch.onnx._deprecation', 'torch.onnx._constants', 'torch.onnx._internal', 'torch.onnx._exporter_states', 'torch.onnx._globals', 'torch.onnx._internal._beartype', 'torch.onnx._internal.diagnostics.infra.sarif._property_bag', 'torch.onnx._internal.diagnostics.infra.sarif._address', 'torch.onnx._internal.diagnostics.infra.sarif._multiformat_message_string', 'torch.onnx._internal.diagnostics.infra.sarif._artifact_content', 'torch.onnx._internal.diagnostics.infra.sarif._message', 'torch.onnx._internal.diagnostics.infra.sarif._artifact_location', 'torch.onnx._internal.diagnostics.infra.sarif._artifact', 'torch.onnx._internal.diagnostics.infra.sarif._region', 'torch.onnx._internal.diagnostics.infra.sarif._replacement', 'torch.onnx._internal.diagnostics.infra.sarif._artifact_change', 'torch.onnx._internal.diagnostics.infra.sarif._rectangle', 'torch.onnx._internal.diagnostics.infra.sarif._attachment', 'torch.onnx._internal.diagnostics.infra.sarif._location_relationship', 'torch.onnx._internal.diagnostics.infra.sarif._logical_location', 'torch.onnx._internal.diagnostics.infra.sarif._physical_location', 'torch.onnx._internal.diagnostics.infra.sarif._location', 'torch.onnx._internal.diagnostics.infra.sarif._tool_component_reference', 'torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_reference', 'torch.onnx._internal.diagnostics.infra.sarif._stack_frame', 'torch.onnx._internal.diagnostics.infra.sarif._stack', 'torch.onnx._internal.diagnostics.infra.sarif._web_request', 'torch.onnx._internal.diagnostics.infra.sarif._web_response', 'torch.onnx._internal.diagnostics.infra.sarif._thread_flow_location', 'torch.onnx._internal.diagnostics.infra.sarif._thread_flow', 'torch.onnx._internal.diagnostics.infra.sarif._code_flow', 'torch.onnx._internal.diagnostics.infra.sarif._reporting_configuration', 'torch.onnx._internal.diagnostics.infra.sarif._configuration_override', 'torch.onnx._internal.diagnostics.infra.sarif._exception', 'torch.onnx._internal.diagnostics.infra.sarif._notification', 'torch.onnx._internal.diagnostics.infra.sarif._invocation', 'torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor_relationship', 'torch.onnx._internal.diagnostics.infra.sarif._reporting_descriptor', 'torch.onnx._internal.diagnostics.infra.sarif._translation_metadata', 'torch.onnx._internal.diagnostics.infra.sarif._tool_component', 'torch.onnx._internal.diagnostics.infra.sarif._tool', 'torch.onnx._internal.diagnostics.infra.sarif._conversion', 'torch.onnx._internal.diagnostics.infra.sarif._edge', 'torch.onnx._internal.diagnostics.infra.sarif._edge_traversal', 'torch.onnx._internal.diagnostics.infra.sarif._node', 'torch.onnx._internal.diagnostics.infra.sarif._graph', 'torch.onnx._internal.diagnostics.infra.sarif._fix', 'torch.onnx._internal.diagnostics.infra.sarif._graph_traversal', 'torch.onnx._internal.diagnostics.infra.sarif._result_provenance', 'torch.onnx._internal.diagnostics.infra.sarif._suppression', 'torch.onnx._internal.diagnostics.infra.sarif._result', 'torch.onnx._internal.diagnostics.infra.sarif._external_properties', 'torch.onnx._internal.diagnostics.infra.sarif._external_property_file_reference', 'torch.onnx._internal.diagnostics.infra.sarif._external_property_file_references', 'torch.onnx._internal.diagnostics.infra.sarif._run_automation_details', 'torch.onnx._internal.diagnostics.infra.sarif._special_locations', 'torch.onnx._internal.diagnostics.infra.sarif._version_control_details', 'torch.onnx._internal.diagnostics.infra.sarif._run', 'torch.onnx._internal.diagnostics.infra.sarif._sarif_log', 'torch.onnx._internal.diagnostics.infra.sarif', 'torch.onnx._internal.diagnostics.infra.formatter', 'torch.onnx._internal.diagnostics.infra._infra', 'torch.onnx._internal.diagnostics.infra.utils', 'torch.onnx._internal.diagnostics.infra.sarif.version', 'torch.onnx._internal.diagnostics.infra.engine', 'torch.onnx._internal.diagnostics.infra', 'torch.onnx._internal.diagnostics._diagnostic', 'torch.onnx._internal.diagnostics._rules', 'torch.onnx._internal.diagnostics', 'torch.onnx.errors', 'torch.onnx._type_utils', 'torch.onnx._internal.registration', 'torch.onnx._internal.jit_utils', 'torch.onnx.symbolic_helper', 'torch.onnx.symbolic_opset9', 'torch.onnx.symbolic_caffe2', 'torch.onnx.symbolic_opset7', 'torch.onnx.symbolic_opset8', 'torch.onnx.symbolic_opset10', 'torch.jit._dataclass_impls', 'torch.jit._monkeytype_config', 'torch.jit._state', 'torch.jit.annotations', 'astunparse.unparser', 'astunparse.printer', 'astunparse', 'torch.jit.frontend', 'torch.backends.cudnn', 'torch.jit._builtins', 'torch.jit._check', 'torch.jit._recursive', 'torch.jit._fuser', 'torch.jit._serialization', 'torch._classes', 'torch.jit._script', 'torch.jit._trace', 'torch.jit._async', 'torch.jit._await', 'torch.jit._decomposition_utils', 'torch.jit._freeze', 'torch.jit._ir_utils', 'torch.jit', 'torch.onnx._internal.onnx_proto_utils', 'torch.onnx.utils', 'torch.onnx.symbolic_opset11', 'torch.onnx.symbolic_opset12', 'torch.onnx.symbolic_opset13', 'torch.onnx.symbolic_opset14', 'torch.onnx.symbolic_opset15', 'torch.onnx.symbolic_opset16', 'torch.onnx.symbolic_opset17', 'torch.onnx.symbolic_opset18', 'torch.onnx', 'torch.linalg', 'tqdm._monitor', 'tqdm._tqdm_pandas', 'tqdm.utils', 'tqdm.std', 'tqdm._dist_ver', 'tqdm.version', 'tqdm.cli', 'tqdm.gui', 'tqdm', 'torch.hub', 'torch.distributions.constraints', 'torch.distributions.utils', 'torch.distributions.distribution', 'torch.distributions.exp_family', 'torch.distributions.bernoulli', 'torch.distributions.dirichlet', 'torch.distributions.beta', 'torch.distributions.binomial', 'torch.distributions.categorical', 'torch.distributions.cauchy', 'torch.distributions.gamma', 'torch.distributions.chi2', 'torch.distributions.transforms', 'torch.distributions.constraint_registry', 'torch.distributions.continuous_bernoulli', 'torch.distributions.exponential', 'torch.distributions.fishersnedecor', 'torch.distributions.geometric', 'torch.distributions.uniform', 'torch.distributions.independent', 'torch.distributions.transformed_distribution', 'torch.distributions.gumbel', 'torch.distributions.half_cauchy', 'torch.distributions.normal', 'torch.distributions.half_normal', 'torch.distributions.laplace', 'torch.distributions.multivariate_normal', 'torch.distributions.lowrank_multivariate_normal', 'torch.distributions.one_hot_categorical', 'torch.distributions.pareto', 'torch.distributions.poisson', 'torch.distributions.kl', 'torch.distributions.kumaraswamy', 'torch.distributions.lkj_cholesky', 'torch.distributions.log_normal', 'torch.distributions.logistic_normal', 'torch.distributions.mixture_same_family', 'torch.distributions.multinomial', 'torch.distributions.negative_binomial', 'torch.distributions.relaxed_bernoulli', 'torch.distributions.relaxed_categorical', 'torch.distributions.studentT', 'torch.distributions.von_mises', 'torch.distributions.weibull', 'torch.distributions.wishart', 'torch.distributions', 'torch.backends.cuda', 'torch.library', 'torch._prims_common', 'torch._prims_common.wrappers', 'torch._prims.nvfuser_prims', 'mpmath.usertools', 'gmpy2.gmpy2', 'gmpy2', 'mpmath.libmp.backend', 'mpmath.libmp.libintmath', 'mpmath.libmp.libmpf', 'mpmath.libmp.libelefun', 'mpmath.libmp.libmpc', 'mpmath.libmp.gammazeta', 'mpmath.libmp.libhyper', 'mpmath.libmp.libmpi', 'mpmath.libmp', 'mpmath.functions.functions', 'mpmath.functions.factorials', 'mpmath.functions.hypergeometric', 'mpmath.functions.expintegrals', 'mpmath.functions.bessel', 'mpmath.functions.orthogonal', 'mpmath.functions.theta', 'mpmath.functions.elliptic', 'mpmath.functions.zeta', 'mpmath.functions.rszeta', 'mpmath.functions.zetazeros', 'mpmath.functions.qfunctions', 'mpmath.functions', 'mpmath.calculus.calculus', 'mpmath.calculus.approximation', 'mpmath.calculus.differentiation', 'mpmath.calculus.extrapolation', 'mpmath.calculus.polynomials', 'mpmath.calculus', 'mpmath.calculus.quadrature', 'mpmath.calculus.inverselaplace', 'mpmath.calculus.optimization', 'mpmath.calculus.odes', 'mpmath.matrices.eigen', 'mpmath.matrices.eigen_symmetric', 'mpmath.matrices', 'mpmath.matrices.matrices', 'mpmath.matrices.calculus', 'mpmath.matrices.linalg', 'mpmath.identification', 'mpmath.visualization', 'mpmath.ctx_base', 'mpmath.math2', 'mpmath.function_docs', 'mpmath.ctx_fp', 'mpmath.rational', 'mpmath.ctx_mp_python', 'mpmath.ctx_mp', 'mpmath.ctx_iv', 'mpmath', 'sympy.release', 'sympy.utilities.enumerative', 'sympy.utilities.misc', 'unittest.util', 'unittest.result', 'unittest.case', 'unittest.suite', 'unittest.loader', 'unittest.signals', 'unittest.runner', 'unittest.main', 'unittest', 'doctest', 'sympy.core.cache', 'sympy.external.importtools', 'sympy.external', 'sympy.external.gmpy', 'sympy.testing.runtests', 'sympy.testing', 'sympy.utilities.exceptions', 'sympy.utilities.decorator', 'sympy.utilities.iterables', 'sympy.utilities.lambdify', 'sympy.utilities.source', 'sympy.utilities.timeutils', 'sympy.utilities', 'sympy.core.random', 'sympy.core.parameters', 'sympy.core.logic', 'sympy.core.facts', 'sympy.core.core', 'sympy.core.assumptions', 'sympy.core.sorting', 'sympy.multipledispatch.utils', 'sympy.multipledispatch.conflict', 'sympy.multipledispatch.dispatcher', 'sympy.multipledispatch.core', 'sympy.multipledispatch', 'sympy.core.kind', 'sympy.core._print_helpers', 'sympy.core.singleton', 'sympy.core.traversal', 'sympy.core.basic', 'sympy.core.sympify', 'sympy.core.evalf', 'sympy.core.decorators', 'sympy.core.operations', 'fractions', 'sympy.core.containers', 'sympy.core.add', 'sympy.core.rules', 'sympy.logic.boolalg', 'sympy.logic.inference', 'sympy.logic', 'sympy.core.symbol', 'sympy.core.function', 'sympy.core.relational', 'sympy.core.power', 'sympy.core.numbers', 'sympy.core.mul', 'sympy.core.coreerrors', 'sympy.core.exprtools', 'sympy.core.mod', 'sympy.core.expr', 'sympy.core.multidimensional', 'sympy.core', 'sympy.assumptions.assume', 'sympy.assumptions.cnf', 'sympy.assumptions.ask_generated', 'sympy.assumptions.ask', 'sympy.assumptions.refine', 'sympy.assumptions.relation.binrel', 'sympy.assumptions.relation', 'sympy.assumptions', 'sympy.polys.polyerrors', 'sympy.polys.polyoptions', 'sympy.polys.domains.domainelement', 'sympy.polys.orderings', 'sympy.polys.polyutils', 'sympy.polys.domains.domain', 'sympy.polys.domains.ring', 'sympy.polys.domains.field', 'sympy.polys.domains.modularinteger', 'sympy.polys.domains.simpledomain', 'sympy.external.pythonmpq', 'sympy.polys.domains.pythonrational', 'sympy.polys.domains.groundtypes', 'sympy.polys.domains.finitefield', 'sympy.polys.domains.characteristiczero', 'sympy.polys.domains.integerring', 'sympy.polys.domains.rationalfield', 'sympy.polys.monomials', 'sympy.polys.densebasic', 'sympy.polys.densearith', 'sympy.polys.densetools', 'sympy.ntheory.primetest', 'sympy.ntheory.generate', 'sympy.ntheory.digits', 'sympy.ntheory.ecm', 'sympy.ntheory.factor_', 'sympy.ntheory.residue_ntheory', 'sympy.ntheory.partitions_', 'sympy.ntheory.multinomial', 'sympy.ntheory.continued_fraction', 'sympy.ntheory.egyptian_fraction', 'sympy.ntheory.qs', 'sympy.ntheory', 'sympy.polys.polyconfig', 'sympy.polys.galoistools', 'sympy.polys.euclidtools', 'sympy.polys.sqfreetools', 'sympy.polys.factortools', 'sympy.polys.rootisolation', 'sympy.polys.polyclasses', 'sympy.polys.domains.algebraicfield', 'sympy.polys.domains.gaussiandomains', 'sympy.polys.domains.mpelements', 'sympy.polys.domains.realfield', 'sympy.polys.domains.complexfield', 'sympy.polys.domains.compositedomain', 'sympy.polys.domains.polynomialring', 'sympy.polys.domains.fractionfield', 'sympy.polys.domains.expressiondomain', 'sympy.polys.domains.expressionrawdomain', 'sympy.polys.domains.pythonintegerring', 'sympy.polys.domains.pythonfinitefield', 'sympy.polys.domains.gmpyintegerring', 'sympy.polys.domains.gmpyfinitefield', 'sympy.polys.domains.pythonrationalfield', 'sympy.polys.domains.gmpyrationalfield', 'sympy.polys.domains', 'sympy.polys.constructor', 'sympy.polys.fglmtools', 'sympy.polys.groebnertools', 'sympy.polys.rationaltools', 'sympy.polys.polytools', 'sympy.functions.combinatorial', 'sympy.functions.combinatorial.factorials', 'sympy.functions.elementary', 'sympy.functions.elementary.miscellaneous', 'sympy.sets.sets', 'sympy.sets.fancysets', 'sympy.sets.contains', 'sympy.sets.conditionset', 'sympy.sets.ordinals', 'sympy.sets.powerset', 'sympy.sets.handlers', 'sympy.sets.handlers.comparison', 'sympy.sets', 'sympy.sets.setexpr', 'sympy.functions.elementary.exponential', 'sympy.functions.elementary.integers', 'sympy.functions.elementary.hyperbolic', 'sympy.functions.elementary.piecewise', 'sympy.functions.elementary.trigonometric', 'sympy.utilities.memoization', 'sympy.functions.combinatorial.numbers', 'sympy.functions.elementary.complexes', 'sympy.functions.special', 'sympy.functions.special.hyper', 'sympy.functions.special.error_functions', 'sympy.functions.special.zeta_functions', 'sympy.functions.special.gamma_functions', 'sympy.functions.special.tensor_functions', 'sympy.functions.special.delta_functions', 'sympy.functions.special.singularity_functions', 'sympy.functions.special.bsplines', 'sympy.polys.orthopolys', 'sympy.functions.special.bessel', 'sympy.functions.special.polynomials', 'sympy.functions.special.spherical_harmonics', 'sympy.functions.special.elliptic_integrals', 'sympy.functions.special.beta_functions', 'sympy.functions.special.mathieu_functions', 'sympy.functions', 'sympy.polys.compatibility', 'sympy.polys.heuristicgcd', 'sympy.printing.conventions', 'sympy.printing.precedence', 'sympy.printing.printer', 'sympy.printing.str', 'sympy.core.alphabets', 'sympy.printing.pretty.pretty_symbology', 'sympy.printing.pretty.stringpict', 'sympy.printing.pretty.pretty', 'sympy.printing.pretty', 'sympy.printing.latex', 'sympy.printing.mathml', 'sympy.printing.repr', 'sympy.printing.python', 'sympy.printing.codeprinter', 'sympy.printing.pycode', 'sympy.printing.glsl', 'sympy.printing.rcode', 'sympy.printing.jscode', 'sympy.printing.julia', 'sympy.printing.mathematica', 'sympy.printing.octave', 'sympy.printing.rust', 'sympy.utilities.pkgdata', 'sympy.utilities.mathml', 'sympy.printing.gtk', 'sympy.printing.preview', 'sympy.printing.tree', 'sympy.printing.tableform', 'sympy.printing.dot', 'sympy.printing.maple', 'sympy.printing', 'sympy.printing.defaults', 'sympy.utilities.magic', 'sympy.polys.rings', 'sympy.polys.specialpolys', 'sympy.polys.polyfuncs', 'sympy.polys.ring_series', 'sympy.polys.polyquinticconst', 'sympy.simplify.gammasimp', 'sympy.simplify.combsimp', 'sympy.simplify.cse_opts', 'sympy.simplify.powsimp', 'sympy.simplify.hyperexpand', 'sympy.simplify.sqrtdenest', 'sympy.simplify.radsimp', 'sympy.simplify.cse_main', 'sympy.strategies.util', 'sympy.strategies.rl', 'sympy.strategies.core', 'sympy.strategies.traverse', 'sympy.strategies.tools', 'sympy.strategies.branch.core', 'sympy.strategies.branch.traverse', 'sympy.strategies.branch.tools', 'sympy.strategies.branch', 'sympy.strategies', 'sympy.strategies.tree', 'sympy.simplify.trigsimp', 'sympy.simplify.simplify', 'sympy.simplify.fu', 'sympy.simplify.epathtools', 'sympy.simplify.ratsimp', 'sympy.simplify', 'sympy.polys.polyroots', 'sympy.polys.rootoftools', 'sympy.polys.numberfields.minpoly', 'sympy.polys.numberfields.subfield', 'sympy.polys.matrices.exceptions', 'sympy.polys.matrices.dense', 'sympy.polys.matrices.sdm', 'sympy.polys.matrices.ddm', 'sympy.polys.matrices.domainscalar', 'sympy.polys.matrices.domainmatrix', 'sympy.polys.matrices', 'sympy.printing.numpy', 'sympy.printing.lambdarepr', 'sympy.polys.numberfields.utilities', 'sympy.ntheory.modular', 'sympy.polys.matrices.normalforms', 'sympy.polys.numberfields.exceptions', 'sympy.polys.numberfields.modules', 'sympy.polys.numberfields.basis', 'sympy.polys.numberfields.primes', 'sympy.polys.numberfields', 'sympy.tensor.indexed', 'sympy.tensor.index_methods', 'sympy.tensor.functions', 'sympy.tensor.array.ndim_array', 'sympy.tensor.array.mutable_ndim_array', 'sympy.tensor.array.dense_ndim_array', 'sympy.tensor.array.sparse_ndim_array', 'sympy.tensor.array.arrayop', 'sympy.tensor.array.array_comprehension', 'sympy.tensor.array', 'sympy.tensor', 'sympy.matrices.utilities', 'sympy.matrices.common', 'sympy.matrices.determinant', 'sympy.matrices.decompositions', 'sympy.matrices.reductions', 'sympy.matrices.subspaces', 'sympy.polys.agca.ideals', 'sympy.polys.agca.modules', 'sympy.polys.agca.homomorphisms', 'sympy.polys.agca', 'sympy.polys.agca.extensions', 'sympy.polys.matrices.eigen', 'sympy.matrices.eigen', 'sympy.matrices.graph', 'sympy.matrices.solvers', 'sympy.matrices.inverse', 'sympy.matrices.matrices', 'sympy.matrices.repmatrix', 'sympy.matrices.dense', 'sympy.matrices.sparse', 'sympy.matrices.sparsetools', 'sympy.matrices.expressions.special', 'sympy.matrices.expressions.matpow', 'sympy.matrices.expressions.inverse', 'sympy.matrices.expressions.transpose', 'sympy.matrices.expressions.permutation', 'sympy.matrices.expressions.matmul', 'sympy.matrices.expressions.matadd', 'sympy.matrices.expressions.determinant', 'sympy.matrices.expressions.matexpr', 'sympy.matrices.expressions.slice', 'sympy.matrices.expressions.trace', 'sympy.matrices.expressions.blockmatrix', 'sympy.matrices.expressions.companion', 'sympy.matrices.expressions.funcmatrix', 'sympy.matrices.expressions.adjoint', 'sympy.matrices.expressions.hadamard', 'sympy.matrices.expressions.diagonal', 'sympy.matrices.expressions.dotproduct', 'sympy.matrices.expressions.kronecker', 'sympy.matrices.expressions.sets', 'sympy.matrices.expressions', 'sympy.matrices.immutable', 'sympy.matrices', 'sympy.polys.partfrac', 'sympy.polys.fields', 'sympy.polys', 'sympy.series.order', 'sympy.calculus.euler', 'sympy.calculus.singularities', 'sympy.calculus.finite_diff', 'sympy.calculus.accumulationbounds', 'sympy.calculus.util', 'sympy.calculus', 'sympy.series.gruntz', 'sympy.series.limits', 'sympy.series.series', 'sympy.series.approximants', 'sympy.series.residues', 'sympy.series.sequences', 'sympy.series.series_class', 'sympy.series.fourier', 'sympy.discrete.transforms', 'sympy.discrete.convolutions', 'sympy.discrete', 'sympy.series.formal', 'sympy.series.limitseq', 'sympy.series', 'sympy.concrete.expr_with_limits', 'sympy.concrete.expr_with_intlimits', 'sympy.polys.domainmatrix', 'sympy.polys.solvers', 'sympy.solvers.polysys', 'sympy.solvers.bivariate', 'sympy.solvers.solvers', 'sympy.polys.matrices.linsolve', 'sympy.solvers.solveset', 'sympy.solvers.diophantine.diophantine', 'sympy.solvers.diophantine', 'sympy.solvers.recurr', 'sympy.integrals.rationaltools', 'sympy.integrals.deltafunctions', 'sympy.integrals.meijerint', 'sympy.integrals.trigonometry', 'sympy.integrals.integrals', 'sympy.solvers.inequalities', 'sympy.integrals.transforms', 'sympy.integrals.singularityfunctions', 'sympy.integrals', 'sympy.solvers.deutils', 'sympy.solvers.ode.riccati', 'sympy.solvers.ode.hypergeometric', 'sympy.solvers.ode.subscheck', 'sympy.solvers.ode.nonhomogeneous', 'sympy.solvers.pde', 'sympy.solvers.ode.lie_group', 'sympy.solvers.ode.single', 'sympy.solvers.ode.ode', 'sympy.solvers.ode.systems', 'sympy.solvers.ode', 'sympy.solvers.decompogen', 'sympy.solvers', 'sympy.concrete.gosper', 'sympy.concrete.summations', 'sympy.concrete.products', 'sympy.concrete', 'sympy.geometry.exceptions', 'sympy.sets.handlers.intersection', 'sympy.sets.handlers.union', 'sympy.geometry.entity', 'sympy.geometry.point', 'sympy.geometry.util', 'sympy.geometry.line', 'sympy.geometry.plane', 'sympy.geometry.polygon', 'sympy.geometry.ellipse', 'sympy.geometry.curve', 'sympy.geometry.parabola', 'sympy.geometry', 'sympy.parsing.sympy_parser', 'sympy.parsing', 'sympy.algebras.quaternion', 'sympy.algebras', 'sympy.plotting.experimental_lambdify', 'sympy.plotting.textplot', 'sympy.plotting.plot', 'sympy.plotting.intervalmath.interval_membership', 'sympy.plotting.intervalmath.interval_arithmetic', 'sympy.plotting.intervalmath.lib_interval', 'sympy.plotting.intervalmath', 'sympy.plotting.plot_implicit', 'sympy.plotting.pygletplot', 'sympy.plotting', 'sympy.interactive.printing', 'sympy.interactive.session', 'sympy.interactive.traversal', 'sympy.interactive', 'sympy', 'torch._guards', 'torch.utils.weak', 'torch._subclasses.meta_utils', 'torch.fx._compatibility', 'torch.fx.immutable_collections', 'torch.fx.operator_schemas', 'torch.fx.node', 'torch.fx._pytree', 'torch.fx.graph', 'torch.fx.graph_module', 'torch.fx.traceback', 'torch.fx.proxy', 'torch.fx._symbolic_trace', 'torch.fx.config', 'torch.fx.interpreter', 'torch.fx.subgraph_rewriter', 'torch.fx', 'torch.utils._mode_utils', 'torch.utils._stats', 'torch._subclasses.fake_tensor', 'torch._subclasses.fake_utils', 'torch._subclasses', 'torch._prims', 'torch.fx.experimental', 'torch.fx.experimental.symbolic_shapes', 'torch._decomp.decompositions', 'torch._decomp', 'torch._refs._conversions', 'torch._refs.fft', 'torch._refs.linalg', 'torch._refs.nn', 'torch._refs.nn.functional', 'torch._refs.special', 'torch._refs', 'torch.backends.mps', 'torch.backends.mkl', 'torch.backends.mkldnn', 'torch.backends.openmp', 'torch.backends.quantized', 'torch.utils.data.sampler', 'torch.utils.data.dataset', 'torch.utils.data.datapipes._hook_iterator', 'torch.utils.data.datapipes._typing', 'torch.utils.data.datapipes.utils', 'torch.utils.data._utils.signal_handling', 'torch.utils.data._utils.worker', 'torch.utils.data._utils.pin_memory', 'torch.utils.data._utils.collate', 'torch.utils.data._utils.fetch', 'torch.utils.data._utils', 'dill.info', '_pyio', 'dill.settings', 'dill._dill', 'dill.source', 'dill.temp', 'dill.pointers', 'dill.detect', 'dill.objtypes', 'dill', 'torch.utils.data._utils.serialization', 'torch.utils.data.datapipes.utils.common', 'torch.utils.data.datapipes.datapipe', 'torch.utils.data.datapipes.iter.utils', 'torch.utils.data.datapipes._decorator', 'torch.utils.data.datapipes.dataframe.dataframe_wrapper', 'torch.utils.data.datapipes.dataframe.structures', 'torch.utils.data.datapipes.dataframe.dataframes', 'torch.utils.data.datapipes.dataframe.datapipes', 'torch.utils.data.datapipes.dataframe', 'torch.utils.data.datapipes.iter.callable', 'torch.utils.data.datapipes.iter.combinatorics', 'torch.utils.data.datapipes.iter.combining', 'torch.utils.data.datapipes.iter.filelister', 'torch.utils.data.datapipes.iter.fileopener', 'torch.utils.data.datapipes.iter.sharding', 'torch.utils.data.datapipes.iter.grouping', 'torch.utils.data.datapipes.utils.decoder', 'torch.utils.data.datapipes.iter.routeddecoder', 'torch.utils.data.datapipes.iter.selecting', 'torch.utils.data.datapipes.iter.streamreader', 'torch.utils.data.datapipes.iter', 'torch.utils.data.datapipes.map.callable', 'torch.utils.data.datapipes.map.combinatorics', 'torch.utils.data.datapipes.map.combining', 'torch.utils.data.datapipes.map.grouping', 'torch.utils.data.datapipes.map.utils', 'torch.utils.data.datapipes.map', 'torch.utils.data.datapipes', 'torch.utils.data.graph', 'torch.utils.data.graph_settings', 'torch.utils.data.dataloader', 'torch.utils.data.distributed', 'torch.utils.data', 'torch.__config__', 'torch.__future__', 'torch.profiler._utils', 'torch.profiler._memory_profiler', 'torch.profiler.profiler', 'torch.profiler.itt', 'torch.profiler', 'torch.ao', 'torch.ao.nn', 'torch.ao.nn.quantizable.modules.activation', 'torch.ao.nn.quantizable.modules.rnn', 'torch.ao.nn.quantizable.modules', 'torch.ao.nn.quantizable', 'torch.nn.quantizable.modules', 'torch.nn.quantizable', 'torch.ao.nn.quantized.modules.activation', 'torch.ao.nn.quantized.modules.dropout', 'torch.ao.nn.intrinsic.modules.fused', 'torch.ao.nn.intrinsic.modules', 'torch.ao.nn.intrinsic', 'torch.ao.nn.quantized.modules.batchnorm', 'torch.ao.nn.quantized.modules.normalization', 'torch.ao.nn.qat.modules.linear', 'torch.ao.nn.qat.modules.conv', 'torch.ao.nn.qat.modules.embedding_ops', 'torch.ao.nn.qat.modules', 'torch.ao.nn.qat', 'torch.ao.nn.intrinsic.qat.modules.linear_relu', 'torch.ao.nn.intrinsic.qat.modules.linear_fused', 'torch.ao.nn.intrinsic.qat.modules.conv_fused', 'torch.ao.nn.intrinsic.qat.modules', 'torch.ao.nn.intrinsic.qat', 'torch.ao.nn.quantized.modules.utils', 'torch.ao.nn.quantized.modules.conv', 'torch.ao.nn.quantized.modules.linear', 'torch.ao.nn.quantized.modules.embedding_ops', 'torch.ao.nn.quantized.modules.rnn', 'torch.ao.nn.quantized.modules.functional_modules', 'torch.ao.nn.quantized.modules', 'torch.ao.nn.quantized.functional', 'torch.ao.nn.quantized', 'torch.ao.nn.quantized.dynamic.modules.linear', 'torch.ao.nn.quantized.dynamic.modules.rnn', 'torch.ao.nn.quantized.dynamic.modules.conv', 'torch.ao.nn.quantized.dynamic.modules', 'torch.ao.nn.quantized.dynamic', 'torch.nn.quantized.dynamic', 'torch.nn.quantized.functional', 'torch.nn.quantized.modules', 'torch.nn.quantized', 'torch.ao.nn.qat.dynamic.modules.linear', 'torch.ao.nn.qat.dynamic.modules', 'torch.ao.nn.qat.dynamic', 'torch.nn.qat.dynamic.modules.linear', 'torch.nn.qat.dynamic.modules', 'torch.nn.qat.dynamic', 'torch.nn.qat.modules.conv', 'torch.nn.qat.modules.embedding_ops', 'torch.nn.qat.modules.linear', 'torch.nn.qat.modules', 'torch.nn.qat', 'torch.nn.intrinsic.modules.fused', 'torch.nn.intrinsic.modules', 'torch.nn.intrinsic.qat.modules.linear_relu', 'torch.nn.intrinsic.qat.modules.linear_fused', 'torch.nn.intrinsic.qat.modules.conv_fused', 'torch.nn.intrinsic.qat.modules', 'torch.nn.intrinsic.qat', 'torch.ao.nn.intrinsic.quantized.modules.linear_relu', 'torch.ao.nn.intrinsic.quantized.modules.conv_relu', 'torch.ao.nn.intrinsic.quantized.modules.bn_relu', 'torch.ao.nn.intrinsic.quantized.modules.conv_add', 'torch.ao.nn.intrinsic.quantized.modules', 'torch.ao.nn.intrinsic.quantized', 'torch.nn.intrinsic.quantized.modules.linear_relu', 'torch.nn.intrinsic.quantized.modules.conv_relu', 'torch.nn.intrinsic.quantized.modules.bn_relu', 'torch.nn.intrinsic.quantized.modules', 'torch.ao.nn.intrinsic.quantized.dynamic.modules.linear_relu', 'torch.ao.nn.intrinsic.quantized.dynamic.modules', 'torch.ao.nn.intrinsic.quantized.dynamic', 'torch.nn.intrinsic.quantized.dynamic.modules.linear_relu', 'torch.nn.intrinsic.quantized.dynamic.modules', 'torch.nn.intrinsic.quantized.dynamic', 'torch.nn.intrinsic.quantized', 'torch.nn.intrinsic', 'torch._tensor_docs', 'torch._storage_docs', 'torch.ao.quantization.quant_type', 'torch.ao.quantization.utils', 'torch.ao.quantization.observer', 'torch.ao.quantization.fake_quantize', 'torch.ao.quantization.fuser_method_mappings', 'torch.ao.quantization.fuse_modules', 'torch.ao.quantization.qconfig', 'torch.ao.quantization.qconfig_mapping', 'torch.ao.nn.quantized.reference.modules.utils', 'torch.ao.nn.quantized.reference.modules.linear', 'torch.ao.nn.quantized.reference.modules.conv', 'torch.ao.nn.quantized.reference.modules.rnn', 'torch.ao.nn.quantized.reference.modules.sparse', 'torch.ao.nn.quantized.reference.modules', 'torch.ao.nn.quantized.reference', 'torch.ao.nn.sparse.quantized.linear', 'torch.ao.nn.sparse.quantized.utils', 'torch.ao.nn.sparse.quantized.dynamic.linear', 'torch.ao.nn.sparse.quantized.dynamic', 'torch.ao.nn.sparse.quantized', 'torch.ao.nn.sparse', 'torch.ao.quantization.stubs', 'torch.ao.quantization.quantization_mappings', 'torch.ao.quantization.quantize', 'torch.ao.quantization.quantize_jit', 'torch.ao.quantization', 'torch.quantization.quantize', 'torch.quantization.observer', 'torch.quantization.qconfig', 'torch.quantization.fake_quantize', 'torch.quantization.fuse_modules', 'torch.quantization.stubs', 'torch.quantization.quant_type', 'torch.quantization.quantize_jit', 'torch.quantization.quantization_mappings', 'torch.quantization.fuser_method_mappings', 'torch.quantization', 'torch.quasirandom', 'torch.multiprocessing._atfork', 'torch._lobpcg', 'torch.masked.maskedtensor.core', 'torch.masked.maskedtensor.binary', 'torch.masked.maskedtensor.passthrough', 'torch.masked.maskedtensor.creation', 'torch.masked.maskedtensor.reductions', 'torch.masked.maskedtensor.unary', 'torch.masked.maskedtensor', 'torch.masked._docs', 'torch.masked._ops', 'torch.masked', 'torch.return_types', 'torch._meta_registrations', 'torch.fx.passes.shape_prop', 'pyparsing.util', 'pyparsing.unicode', 'pyparsing.exceptions', 'pyparsing.actions', 'pyparsing.results', 'pyparsing.core', 'pyparsing.helpers', 'pyparsing.testing', 'pyparsing.common', 'pyparsing', 'dot_parser', 'pydot', 'torch.fx.passes.graph_drawer', 'torch.fx.passes.graph_manipulation', 'torch.fx.passes.tools_common', 'torch.fx.passes.utils.matcher_utils', 'torch.fx.passes.utils.common', 'torch.fx.passes.utils', 'torch.fx.passes.split_utils', 'torch.fx.passes.net_min_base', 'torch.fx.passes.operator_support', 'torch.fx.passes.param_fetch', 'torch.fx.passes.reinplace', 'torch.fx.passes.split_module', 'torch.fx.passes.splitter_base', 'torch.fx.passes', 'torch.fx.experimental.const_fold', 'torch._dispatch', 'unittest.mock', 'torch._dispatch.python', 'torch.fx.experimental.proxy_tensor', 'torch._functorch.eager_transforms', 'torch._functorch.functional_call', 'torch._functorch.batch_norm_replacement', 'torch.func', 'torch', 'ultralytics.data.utils', 'PIL._version', 'PIL', 'defusedxml.common', 'defusedxml', 'xml.etree', 'xml.etree.ElementPath', '_elementtree', 'xml.etree.ElementTree', 'defusedxml.ElementTree', 'PIL.ImageMode', 'PIL.TiffTags', 'PIL._binary', 'PIL._deprecate', 'PIL._util', 'PIL._imaging', 'cffi.lock', 'cffi.error', 'cffi.model', 'cffi.api', 'cffi', 'PIL.Image', 'PIL.ImageOps', 'ultralytics.nn', 'ultralytics.nn.tasks', 'ultralytics.nn.modules', 'ultralytics.nn.modules.block', 'ultralytics.utils', 'matplotlib', 'matplotlib._api.deprecation', 'matplotlib._api', 'matplotlib._version', 'matplotlib._c_internal_utils', 'matplotlib.cbook', 'matplotlib.docstring', 'PIL.ImageChops', 'PIL.ImageFile', 'PIL.GimpGradientFile', 'PIL.GimpPaletteFile', 'PIL.ImageColor', 'PIL.PaletteFile', 'PIL.ImagePalette', 'PIL.ImageSequence', 'PIL.PngImagePlugin', 'matplotlib._path', 'matplotlib.bezier', 'matplotlib.path', 'matplotlib.transforms', 'matplotlib.ticker', 'matplotlib.scale', 'matplotlib._color_data', 'matplotlib.colors', 'matplotlib.fontconfig_pattern', 'matplotlib._enums', 'cycler', 'matplotlib.rcsetup', 'matplotlib.ft2font', 'kiwisolver._cext', 'kiwisolver']
2024-08-02 13:20:10,831 [74922] DEBUG    matplotlib:275: [JupyterRequire] CACHEDIR=/Users/innakonar/.matplotlib
2024-08-02 13:20:10,835 [74922] DEBUG    matplotlib.font_manager:1439: [JupyterRequire] Using fontManager instance from /Users/innakonar/.matplotlib/fontlist-v330.json
2024-08-02 13:29:35,754 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 13:29:35,755 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 13:29:35,755 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 13:29:35,762 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 13:29:35,764 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 13:29:35,765 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 13:30:37,183 [74922] DEBUG    matplotlib.pyplot:301: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2024-08-02 13:30:37,191 [74922] DEBUG    matplotlib.pyplot:301: [JupyterRequire] Loaded backend module://matplotlib_inline.backend_inline version unknown.
2024-08-02 13:30:37,195 [74922] DEBUG    matplotlib.font_manager:1329: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2024-08-02 13:30:37,195 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,196 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,197 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,198 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,199 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,200 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,200 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,201 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,202 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,203 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,204 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,205 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,206 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,207 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,208 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,209 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,210 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,211 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,212 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,213 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2024-08-02 13:30:37,214 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2024-08-02 13:30:37,215 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,216 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,217 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,218 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,219 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,220 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,221 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,222 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,223 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,224 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,225 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2024-08-02 13:30:37,226 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,227 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,228 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2024-08-02 13:30:37,228 [74922] DEBUG    matplotlib.font_manager:1341: [JupyterRequire] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2024-08-02 13:30:37,228 [74922] DEBUG    matplotlib.font_manager:1367: [JupyterRequire] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2024-08-02 13:46:02,523 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 13:46:02,525 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 13:46:02,525 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 13:46:02,529 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 13:46:02,530 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 13:46:02,531 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 13:46:02,568 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 13:46:02,568 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 13:46:02,568 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 13:46:02,571 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 13:46:02,573 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 13:46:02,575 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 14:18:01,399 [74922] WARNING  py.warnings:109: [JupyterRequire] /Users/innakonar/opt/anaconda3/lib/python3.9/site-packages/numpy/_core/_dtype.py:340: FutureWarning: In the future `np.bool` will be defined as the corresponding NumPy scalar.
  elif dtype.type == np.bool:

2024-08-02 14:22:01,203 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 14:22:01,205 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 14:22:01,205 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 14:22:01,209 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 14:22:01,209 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 14:22:01,209 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 14:22:02,187 [42212] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 14:22:02,189 [42212] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 14:22:02,189 [42212] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 14:22:02,192 [42212] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 14:22:02,193 [42212] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 14:22:02,193 [42212] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 15:29:04,238 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 15:29:04,250 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 15:29:04,250 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 15:29:04,254 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 15:29:04,256 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 15:29:04,257 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 16:05:57,602 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 16:05:57,609 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 16:05:57,609 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 16:05:57,624 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 16:05:57,627 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 16:05:57,628 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-02 17:05:20,386 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-02 17:05:20,393 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-02 17:05:20,393 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-02 17:05:20,404 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-02 17:05:20,406 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-02 17:05:20,407 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 09:04:40,030 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 09:04:40,041 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 09:04:40,041 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 09:04:40,047 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 09:04:40,048 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 09:04:40,048 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 09:35:48,550 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 09:35:48,551 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 09:35:48,552 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 09:35:48,559 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 09:35:48,561 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 09:35:48,562 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 13:45:59,868 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 13:45:59,876 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 13:45:59,877 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 13:45:59,884 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 13:45:59,885 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 13:45:59,886 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 13:46:59,849 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 13:46:59,850 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 13:46:59,850 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 13:46:59,854 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 13:46:59,855 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 13:46:59,855 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 18:58:54,229 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 18:58:54,246 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 18:58:54,246 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 18:58:54,255 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 18:58:54,258 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 18:58:54,259 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 19:07:09,133 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 19:07:09,162 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 19:07:09,168 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 19:07:09,195 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 19:07:09,201 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 19:07:09,202 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 19:46:47,367 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 19:46:47,367 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 19:46:47,367 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 19:46:47,372 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 19:46:47,373 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 19:46:47,374 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 21:54:27,641 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 21:54:27,653 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 21:54:27,654 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 21:54:27,661 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 21:54:27,663 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 21:54:27,663 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 22:01:31,474 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 22:01:31,487 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 22:01:31,487 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 22:01:31,490 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 22:01:31,490 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 22:01:31,491 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 22:04:05,490 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 22:04:05,491 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 22:04:05,493 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 22:04:05,497 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 22:04:05,499 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 22:04:05,499 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-03 22:09:13,482 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-03 22:09:13,484 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-03 22:09:13,484 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-03 22:09:13,490 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-03 22:09:13,490 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-03 22:09:13,492 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-04 00:08:20,100 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-04 00:08:20,122 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-04 00:08:20,123 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-04 00:08:20,143 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-04 00:08:20,147 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-04 00:08:20,147 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-04 09:01:22,969 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-04 09:01:22,989 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-04 09:01:22,990 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-04 09:01:23,009 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-04 09:01:23,016 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-04 09:01:23,016 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
2024-08-04 10:27:16,503 [74922] DEBUG    root:75: [JupyterRequire] Loading Jupyter Require extension.
2024-08-04 10:27:16,525 [74922] DEBUG    root:93: [JupyterRequire] Initializing comms.
2024-08-04 10:27:16,525 [74922] INFO     root:247: [JupyterRequire] Initializing comms.
2024-08-04 10:27:16,532 [74922] DEBUG    root:195: [JupyterRequire] Configuration requested: {'paths': {}, 'shim': None}
2024-08-04 10:27:16,533 [74922] INFO     root:271: [JupyterRequire] Comms have been successfully initialized.
2024-08-04 10:27:16,533 [74922] DEBUG    root:97: [JupyterRequire] Registering comm targets.
